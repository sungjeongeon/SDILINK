
SDILink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080038f0  080038f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa4  08003aa4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa4  08003aa4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa4  08003aa4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000070  08003b1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08003b1c  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e4c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001826  00000000  00000000  00027ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000778  00000000  00000000  00029710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  00029e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000176da  00000000  00000000  0002a568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000679a  00000000  00000000  00041c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008379c  00000000  00000000  000483dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbb78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  000cbbf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080038d8 	.word	0x080038d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080038d8 	.word	0x080038d8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  if (ch == '\n')
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b0a      	cmp	r3, #10
 800017c:	d106      	bne.n	800018c <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800017e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000182:	2201      	movs	r2, #1
 8000184:	4907      	ldr	r1, [pc, #28]	; (80001a4 <__io_putchar+0x34>)
 8000186:	4808      	ldr	r0, [pc, #32]	; (80001a8 <__io_putchar+0x38>)
 8000188:	f001 fd05 	bl	8001b96 <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800018c:	1d39      	adds	r1, r7, #4
 800018e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000192:	2201      	movs	r2, #1
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__io_putchar+0x38>)
 8000196:	f001 fcfe 	bl	8001b96 <HAL_UART_Transmit>

  return ch;
 800019a:	687b      	ldr	r3, [r7, #4]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3708      	adds	r7, #8
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	080038f0 	.word	0x080038f0
 80001a8:	200008dc 	.word	0x200008dc

080001ac <substr>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char* substr(const char *src, int m, int n)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b088      	sub	sp, #32
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	60b9      	str	r1, [r7, #8]
 80001b6:	607a      	str	r2, [r7, #4]
    // 목적지 문자열의 길이를 얻는다.
    int len = n - m;
 80001b8:	687a      	ldr	r2, [r7, #4]
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	1ad3      	subs	r3, r2, r3
 80001be:	617b      	str	r3, [r7, #20]

    // 대상에 (len + 1) 문자를 할당합니다(추가 null 문자의 경우 +1).
    char *dest = (char*)malloc(sizeof(char) * (len + 1));
 80001c0:	697b      	ldr	r3, [r7, #20]
 80001c2:	3301      	adds	r3, #1
 80001c4:	4618      	mov	r0, r3
 80001c6:	f002 fa3f 	bl	8002648 <malloc>
 80001ca:	4603      	mov	r3, r0
 80001cc:	61fb      	str	r3, [r7, #28]

    // 소스 문자열에서 m번째와 n번째 인덱스 사이의 문자를 추출합니다.
    // 대상 문자열에 복사
    for (int i = m; i < n && (*(src + i) != '\0'); i++)
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	61bb      	str	r3, [r7, #24]
 80001d2:	e00b      	b.n	80001ec <substr+0x40>
    {
        *dest = *(src + i);
 80001d4:	69bb      	ldr	r3, [r7, #24]
 80001d6:	68fa      	ldr	r2, [r7, #12]
 80001d8:	4413      	add	r3, r2
 80001da:	781a      	ldrb	r2, [r3, #0]
 80001dc:	69fb      	ldr	r3, [r7, #28]
 80001de:	701a      	strb	r2, [r3, #0]
        dest++;
 80001e0:	69fb      	ldr	r3, [r7, #28]
 80001e2:	3301      	adds	r3, #1
 80001e4:	61fb      	str	r3, [r7, #28]
    for (int i = m; i < n && (*(src + i) != '\0'); i++)
 80001e6:	69bb      	ldr	r3, [r7, #24]
 80001e8:	3301      	adds	r3, #1
 80001ea:	61bb      	str	r3, [r7, #24]
 80001ec:	69ba      	ldr	r2, [r7, #24]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	da05      	bge.n	8000200 <substr+0x54>
 80001f4:	69bb      	ldr	r3, [r7, #24]
 80001f6:	68fa      	ldr	r2, [r7, #12]
 80001f8:	4413      	add	r3, r2
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d1e9      	bne.n	80001d4 <substr+0x28>
    }

    // 대상 문자열을 null 종료
    *dest = '\0';
 8000200:	69fb      	ldr	r3, [r7, #28]
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]

    // 목적지 문자열을 반환
    return dest - len;
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	425b      	negs	r3, r3
 800020a:	69fa      	ldr	r2, [r7, #28]
 800020c:	4413      	add	r3, r2
}
 800020e:	4618      	mov	r0, r3
 8000210:	3720      	adds	r7, #32
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}

08000216 <isContain>:

int isContain(char resp[], char target[]){
 8000216:	b580      	push	{r7, lr}
 8000218:	b088      	sub	sp, #32
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
 800021e:	6039      	str	r1, [r7, #0]
	int len = strlen(resp);
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f7ff ff9d 	bl	8000160 <strlen>
 8000226:	4603      	mov	r3, r0
 8000228:	617b      	str	r3, [r7, #20]
	int tlen = strlen(target);
 800022a:	6838      	ldr	r0, [r7, #0]
 800022c:	f7ff ff98 	bl	8000160 <strlen>
 8000230:	4603      	mov	r3, r0
 8000232:	613b      	str	r3, [r7, #16]
	int result = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	61fb      	str	r3, [r7, #28]
	if(len<tlen)
 8000238:	697a      	ldr	r2, [r7, #20]
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	429a      	cmp	r2, r3
 800023e:	da02      	bge.n	8000246 <isContain+0x30>
		result = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	61fb      	str	r3, [r7, #28]
 8000244:	e01e      	b.n	8000284 <isContain+0x6e>
	else{
		for(int i=0; i<len-tlen; ++i){
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
 800024a:	e015      	b.n	8000278 <isContain+0x62>
			char* stateWord = substr(resp, i, i+tlen);
 800024c:	69ba      	ldr	r2, [r7, #24]
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	4413      	add	r3, r2
 8000252:	461a      	mov	r2, r3
 8000254:	69b9      	ldr	r1, [r7, #24]
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f7ff ffa8 	bl	80001ac <substr>
 800025c:	60f8      	str	r0, [r7, #12]
			if(!strcmp(stateWord,target)){
 800025e:	6839      	ldr	r1, [r7, #0]
 8000260:	68f8      	ldr	r0, [r7, #12]
 8000262:	f7ff ff73 	bl	800014c <strcmp>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d102      	bne.n	8000272 <isContain+0x5c>
				result = 1;
 800026c:	2301      	movs	r3, #1
 800026e:	61fb      	str	r3, [r7, #28]
				break;
 8000270:	e008      	b.n	8000284 <isContain+0x6e>
		for(int i=0; i<len-tlen; ++i){
 8000272:	69bb      	ldr	r3, [r7, #24]
 8000274:	3301      	adds	r3, #1
 8000276:	61bb      	str	r3, [r7, #24]
 8000278:	697a      	ldr	r2, [r7, #20]
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	69ba      	ldr	r2, [r7, #24]
 8000280:	429a      	cmp	r2, r3
 8000282:	dbe3      	blt.n	800024c <isContain+0x36>
			}
		}
	}
	return result;
 8000284:	69fb      	ldr	r3, [r7, #28]
}
 8000286:	4618      	mov	r0, r3
 8000288:	3720      	adds	r7, #32
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <ESPSendCommand>:

void ESPSendCommand(char cmd[])
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b0c4      	sub	sp, #272	; 0x110
 8000294:	af00      	add	r7, sp, #0
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	6018      	str	r0, [r3, #0]
	char sendcmd[256];
	strncpy(sendcmd, cmd, strlen(cmd)-2);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	6818      	ldr	r0, [r3, #0]
 800029e:	f7ff ff5f 	bl	8000160 <strlen>
 80002a2:	4603      	mov	r3, r0
 80002a4:	1e9a      	subs	r2, r3, #2
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	f107 000c 	add.w	r0, r7, #12
 80002ac:	6819      	ldr	r1, [r3, #0]
 80002ae:	f002 fe00 	bl	8002eb2 <strncpy>
	printf("Send : %s", cmd);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	6819      	ldr	r1, [r3, #0]
 80002b6:	4824      	ldr	r0, [pc, #144]	; (8000348 <ESPSendCommand+0xb8>)
 80002b8:	f002 fd42 	bl	8002d40 <iprintf>
	if(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), TIME_OUT)){
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	f7ff ff4e 	bl	8000160 <strlen>
 80002c4:	4603      	mov	r3, r0
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002cc:	1d39      	adds	r1, r7, #4
 80002ce:	6809      	ldr	r1, [r1, #0]
 80002d0:	481e      	ldr	r0, [pc, #120]	; (800034c <ESPSendCommand+0xbc>)
 80002d2:	f001 fc60 	bl	8001b96 <HAL_UART_Transmit>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d003      	beq.n	80002e4 <ESPSendCommand+0x54>
		printf("error\n");
 80002dc:	481c      	ldr	r0, [pc, #112]	; (8000350 <ESPSendCommand+0xc0>)
 80002de:	f002 fda3 	bl	8002e28 <puts>
 80002e2:	e02d      	b.n	8000340 <ESPSendCommand+0xb0>
		return;
	}
	memset(response, 0, sizeof(response));
 80002e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002e8:	2100      	movs	r1, #0
 80002ea:	481a      	ldr	r0, [pc, #104]	; (8000354 <ESPSendCommand+0xc4>)
 80002ec:	f002 f9b4 	bl	8002658 <memset>
	HAL_UART_Receive(&huart1, (uint8_t*)response, MAX_SIZE, TIME_OUT);
 80002f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002f8:	4916      	ldr	r1, [pc, #88]	; (8000354 <ESPSendCommand+0xc4>)
 80002fa:	4814      	ldr	r0, [pc, #80]	; (800034c <ESPSendCommand+0xbc>)
 80002fc:	f001 fcdd 	bl	8001cba <HAL_UART_Receive>
	if(response==NULL){
		HAL_Delay(5000);
	}

	if(isContain(response,"OK")==1){
 8000300:	4915      	ldr	r1, [pc, #84]	; (8000358 <ESPSendCommand+0xc8>)
 8000302:	4814      	ldr	r0, [pc, #80]	; (8000354 <ESPSendCommand+0xc4>)
 8000304:	f7ff ff87 	bl	8000216 <isContain>
 8000308:	4603      	mov	r3, r0
 800030a:	2b01      	cmp	r3, #1
 800030c:	d10d      	bne.n	800032a <ESPSendCommand+0x9a>
		char *result = strchr(response, '\n');
 800030e:	210a      	movs	r1, #10
 8000310:	4810      	ldr	r0, [pc, #64]	; (8000354 <ESPSendCommand+0xc4>)
 8000312:	f002 fdc1 	bl	8002e98 <strchr>
 8000316:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		printf("Receive : %s\n", result+1);
 800031a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800031e:	3301      	adds	r3, #1
 8000320:	4619      	mov	r1, r3
 8000322:	480e      	ldr	r0, [pc, #56]	; (800035c <ESPSendCommand+0xcc>)
 8000324:	f002 fd0c 	bl	8002d40 <iprintf>
 8000328:	e00a      	b.n	8000340 <ESPSendCommand+0xb0>
	}
	else{
		printf("%s\n",response);
 800032a:	480a      	ldr	r0, [pc, #40]	; (8000354 <ESPSendCommand+0xc4>)
 800032c:	f002 fd7c 	bl	8002e28 <puts>
		HAL_Delay(5000);
 8000330:	f241 3088 	movw	r0, #5000	; 0x1388
 8000334:	f000 fc52 	bl	8000bdc <HAL_Delay>
		ESPSendCommand(cmd);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	6818      	ldr	r0, [r3, #0]
 800033c:	f7ff ffa8 	bl	8000290 <ESPSendCommand>
	}
}
 8000340:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	080038f4 	.word	0x080038f4
 800034c:	20000498 	.word	0x20000498
 8000350:	08003900 	.word	0x08003900
 8000354:	20000098 	.word	0x20000098
 8000358:	08003908 	.word	0x08003908
 800035c:	0800390c 	.word	0x0800390c

08000360 <ESPSendCIPSEND>:
void ESPSendCIPSEND(char cmd[])
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b0a4      	sub	sp, #144	; 0x90
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	char sendcmd[128];
	strncpy(sendcmd, cmd, strlen(cmd)-2);
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f7ff fef9 	bl	8000160 <strlen>
 800036e:	4603      	mov	r3, r0
 8000370:	1e9a      	subs	r2, r3, #2
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fd9a 	bl	8002eb2 <strncpy>
	printf("Send : %s", cmd);
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	4822      	ldr	r0, [pc, #136]	; (800040c <ESPSendCIPSEND+0xac>)
 8000382:	f002 fcdd 	bl	8002d40 <iprintf>
	if(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), TIME_OUT)){
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f7ff feea 	bl	8000160 <strlen>
 800038c:	4603      	mov	r3, r0
 800038e:	b29a      	uxth	r2, r3
 8000390:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	481e      	ldr	r0, [pc, #120]	; (8000410 <ESPSendCIPSEND+0xb0>)
 8000398:	f001 fbfd 	bl	8001b96 <HAL_UART_Transmit>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d003      	beq.n	80003aa <ESPSendCIPSEND+0x4a>
		printf("error\n");
 80003a2:	481c      	ldr	r0, [pc, #112]	; (8000414 <ESPSendCIPSEND+0xb4>)
 80003a4:	f002 fd40 	bl	8002e28 <puts>
 80003a8:	e02c      	b.n	8000404 <ESPSendCIPSEND+0xa4>
		return;
	}
	memset(response, 0, sizeof(response));
 80003aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003ae:	2100      	movs	r1, #0
 80003b0:	4819      	ldr	r0, [pc, #100]	; (8000418 <ESPSendCIPSEND+0xb8>)
 80003b2:	f002 f951 	bl	8002658 <memset>
	HAL_UART_Receive(&huart1, (uint8_t*)response, MAX_SIZE, TIME_OUT);
 80003b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80003ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003be:	4916      	ldr	r1, [pc, #88]	; (8000418 <ESPSendCIPSEND+0xb8>)
 80003c0:	4813      	ldr	r0, [pc, #76]	; (8000410 <ESPSendCIPSEND+0xb0>)
 80003c2:	f001 fc7a 	bl	8001cba <HAL_UART_Receive>
	if(response==NULL){
		HAL_Delay(5000);
	}


	if(isContain(response,">")==1){
 80003c6:	4915      	ldr	r1, [pc, #84]	; (800041c <ESPSendCIPSEND+0xbc>)
 80003c8:	4813      	ldr	r0, [pc, #76]	; (8000418 <ESPSendCIPSEND+0xb8>)
 80003ca:	f7ff ff24 	bl	8000216 <isContain>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d10d      	bne.n	80003f0 <ESPSendCIPSEND+0x90>
		char *result = strchr(response, '\n');
 80003d4:	210a      	movs	r1, #10
 80003d6:	4810      	ldr	r0, [pc, #64]	; (8000418 <ESPSendCIPSEND+0xb8>)
 80003d8:	f002 fd5e 	bl	8002e98 <strchr>
 80003dc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		printf("Receive : %s\n", result+1);
 80003e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80003e4:	3301      	adds	r3, #1
 80003e6:	4619      	mov	r1, r3
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <ESPSendCIPSEND+0xc0>)
 80003ea:	f002 fca9 	bl	8002d40 <iprintf>
 80003ee:	e009      	b.n	8000404 <ESPSendCIPSEND+0xa4>
	}
	else{
		printf("%s\n",response);
 80003f0:	4809      	ldr	r0, [pc, #36]	; (8000418 <ESPSendCIPSEND+0xb8>)
 80003f2:	f002 fd19 	bl	8002e28 <puts>
		HAL_Delay(5000);
 80003f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80003fa:	f000 fbef 	bl	8000bdc <HAL_Delay>
		ESPSendCommand(cmd);
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f7ff ff46 	bl	8000290 <ESPSendCommand>
	}
}
 8000404:	3790      	adds	r7, #144	; 0x90
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	080038f4 	.word	0x080038f4
 8000410:	20000498 	.word	0x20000498
 8000414:	08003900 	.word	0x08003900
 8000418:	20000098 	.word	0x20000098
 800041c:	0800391c 	.word	0x0800391c
 8000420:	0800390c 	.word	0x0800390c

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b5b0      	push	{r4, r5, r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800042a:	f000 fb75 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042e:	f000 f861 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000432:	f000 f8f5 	bl	8000620 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000436:	f000 f8c9 	bl	80005cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800043a:	f000 f89d 	bl	8000578 <MX_USART1_UART_Init>
//  HAL_Delay(1000);
//  ESPSendCommand("AT+CWJAP=\"SSAFY_GUEST\",\"ssafy2023!\"\r\n");
//  HAL_Delay(1000);
//  ESPSendCommand("AT+CWJAP?\r\n");
//  HAL_Delay(1000);
  sprintf(request, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", HTTP_SERVER, HTTP_PORT);
 800043e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000442:	4a24      	ldr	r2, [pc, #144]	; (80004d4 <main+0xb0>)
 8000444:	4924      	ldr	r1, [pc, #144]	; (80004d8 <main+0xb4>)
 8000446:	4825      	ldr	r0, [pc, #148]	; (80004dc <main+0xb8>)
 8000448:	f002 fd06 	bl	8002e58 <siprintf>
  ESPSendCommand(request);
 800044c:	4823      	ldr	r0, [pc, #140]	; (80004dc <main+0xb8>)
 800044e:	f7ff ff1f 	bl	8000290 <ESPSendCommand>

  HAL_Delay(1000);
 8000452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000456:	f000 fbc1 	bl	8000bdc <HAL_Delay>
  memset(request, 0, sizeof(response));
 800045a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800045e:	2100      	movs	r1, #0
 8000460:	481e      	ldr	r0, [pc, #120]	; (80004dc <main+0xb8>)
 8000462:	f002 f8f9 	bl	8002658 <memset>
  /*
   * #define GET_REQUEST "GET %s HTTP/1.1\r\nHost: %s\r\nConnection: close\r\n\r\n"
   * #define POST_REQUEST "POST %s HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n"
   */
  // POST
	char body[] = "{\"voltage\": 12.3}";
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <main+0xbc>)
 8000468:	1d3c      	adds	r4, r7, #4
 800046a:	461d      	mov	r5, r3
 800046c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800046e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000470:	682b      	ldr	r3, [r5, #0]
 8000472:	8023      	strh	r3, [r4, #0]
  sprintf(request, CIPSEND_REQUEST, (strlen(POST_REQUEST) + strlen(HTTP_API_PATH) + strlen(HTTP_SERVER) + strlen(body) + 2));
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff fe72 	bl	8000160 <strlen>
 800047c:	4603      	mov	r3, r0
 800047e:	3369      	adds	r3, #105	; 0x69
 8000480:	461a      	mov	r2, r3
 8000482:	4918      	ldr	r1, [pc, #96]	; (80004e4 <main+0xc0>)
 8000484:	4815      	ldr	r0, [pc, #84]	; (80004dc <main+0xb8>)
 8000486:	f002 fce7 	bl	8002e58 <siprintf>
  ESPSendCIPSEND(request);
 800048a:	4814      	ldr	r0, [pc, #80]	; (80004dc <main+0xb8>)
 800048c:	f7ff ff68 	bl	8000360 <ESPSendCIPSEND>

  HAL_Delay(1000);
 8000490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000494:	f000 fba2 	bl	8000bdc <HAL_Delay>
  sprintf(request, POST_REQUEST, HTTP_API_PATH, HTTP_SERVER, strlen(body), body);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff fe60 	bl	8000160 <strlen>
 80004a0:	4602      	mov	r2, r0
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <main+0xb0>)
 80004aa:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <main+0xc4>)
 80004ac:	490f      	ldr	r1, [pc, #60]	; (80004ec <main+0xc8>)
 80004ae:	480b      	ldr	r0, [pc, #44]	; (80004dc <main+0xb8>)
 80004b0:	f002 fcd2 	bl	8002e58 <siprintf>
  ESPSendCommand(request);
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <main+0xb8>)
 80004b6:	f7ff feeb 	bl	8000290 <ESPSendCommand>

  HAL_Delay(1000);
 80004ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004be:	f000 fb8d 	bl	8000bdc <HAL_Delay>
  ESPSendCommand("AT+CIPCLOSE\r\n");
 80004c2:	480b      	ldr	r0, [pc, #44]	; (80004f0 <main+0xcc>)
 80004c4:	f7ff fee4 	bl	8000290 <ESPSendCommand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  break;
 80004c8:	bf00      	nop
 80004ca:	2300      	movs	r3, #0
	  ESPSendCommand("AT\r\n");
	  HAL_Delay(2000);
  }
  /* USER CODE END 3 */
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3718      	adds	r7, #24
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bdb0      	pop	{r4, r5, r7, pc}
 80004d4:	08003920 	.word	0x08003920
 80004d8:	08003930 	.word	0x08003930
 80004dc:	200004dc 	.word	0x200004dc
 80004e0:	080039cc 	.word	0x080039cc
 80004e4:	0800394c 	.word	0x0800394c
 80004e8:	0800395c 	.word	0x0800395c
 80004ec:	08003964 	.word	0x08003964
 80004f0:	080039bc 	.word	0x080039bc

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b090      	sub	sp, #64	; 0x40
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0318 	add.w	r3, r7, #24
 80004fe:	2228      	movs	r2, #40	; 0x28
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 f8a8 	bl	8002658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000516:	2302      	movs	r3, #2
 8000518:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	2301      	movs	r3, #1
 800051c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051e:	2310      	movs	r3, #16
 8000520:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	2302      	movs	r3, #2
 8000524:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000526:	2300      	movs	r3, #0
 8000528:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800052a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800052e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fec5 	bl	80012c4 <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000540:	f000 f8fa 	bl	8000738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	230f      	movs	r3, #15
 8000546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000548:	2302      	movs	r3, #2
 800054a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2102      	movs	r1, #2
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f930 	bl	80017c4 <HAL_RCC_ClockConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800056a:	f000 f8e5 	bl	8000738 <Error_Handler>
  }
}
 800056e:	bf00      	nop
 8000570:	3740      	adds	r7, #64	; 0x40
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <MX_USART1_UART_Init+0x50>)
 8000580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000584:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005b0:	f001 faa4 	bl	8001afc <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ba:	f000 f8bd 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000498 	.word	0x20000498
 80005c8:	40013800 	.word	0x40013800

080005cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_USART2_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 8000604:	f001 fa7a 	bl	8001afc <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f893 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200008dc 	.word	0x200008dc
 800061c:	40004400 	.word	0x40004400

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000634:	4b3c      	ldr	r3, [pc, #240]	; (8000728 <MX_GPIO_Init+0x108>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a3b      	ldr	r2, [pc, #236]	; (8000728 <MX_GPIO_Init+0x108>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b39      	ldr	r3, [pc, #228]	; (8000728 <MX_GPIO_Init+0x108>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064c:	4b36      	ldr	r3, [pc, #216]	; (8000728 <MX_GPIO_Init+0x108>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a35      	ldr	r2, [pc, #212]	; (8000728 <MX_GPIO_Init+0x108>)
 8000652:	f043 0320 	orr.w	r3, r3, #32
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b33      	ldr	r3, [pc, #204]	; (8000728 <MX_GPIO_Init+0x108>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0320 	and.w	r3, r3, #32
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b30      	ldr	r3, [pc, #192]	; (8000728 <MX_GPIO_Init+0x108>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a2f      	ldr	r2, [pc, #188]	; (8000728 <MX_GPIO_Init+0x108>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <MX_GPIO_Init+0x108>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <MX_GPIO_Init+0x108>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a29      	ldr	r2, [pc, #164]	; (8000728 <MX_GPIO_Init+0x108>)
 8000682:	f043 0308 	orr.w	r3, r3, #8
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <MX_GPIO_Init+0x108>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2120      	movs	r1, #32
 8000698:	4824      	ldr	r0, [pc, #144]	; (800072c <MX_GPIO_Init+0x10c>)
 800069a:	f000 fdd9 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_GPIO_Init+0x110>)
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	4820      	ldr	r0, [pc, #128]	; (8000734 <MX_GPIO_Init+0x114>)
 80006b4:	f000 fc72 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006b8:	2320      	movs	r3, #32
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	4817      	ldr	r0, [pc, #92]	; (800072c <MX_GPIO_Init+0x10c>)
 80006d0:	f000 fc64 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	480f      	ldr	r0, [pc, #60]	; (800072c <MX_GPIO_Init+0x10c>)
 80006ee:	f000 fc55 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <MX_GPIO_Init+0x10c>)
 800070c:	f000 fc46 	bl	8000f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2028      	movs	r0, #40	; 0x28
 8000716:	f000 fb5a 	bl	8000dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800071a:	2028      	movs	r0, #40	; 0x28
 800071c:	f000 fb73 	bl	8000e06 <HAL_NVIC_EnableIRQ>

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800
 8000730:	10110000 	.word	0x10110000
 8000734:	40011000 	.word	0x40011000

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <HAL_MspInit+0x5c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x5c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x60>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x60>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a39      	ldr	r2, [pc, #228]	; (80008a8 <HAL_UART_MspInit+0x100>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d13a      	bne.n	800083e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c8:	4b38      	ldr	r3, [pc, #224]	; (80008ac <HAL_UART_MspInit+0x104>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a37      	ldr	r2, [pc, #220]	; (80008ac <HAL_UART_MspInit+0x104>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b35      	ldr	r3, [pc, #212]	; (80008ac <HAL_UART_MspInit+0x104>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <HAL_UART_MspInit+0x104>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a31      	ldr	r2, [pc, #196]	; (80008ac <HAL_UART_MspInit+0x104>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <HAL_UART_MspInit+0x104>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	4619      	mov	r1, r3
 800080c:	4828      	ldr	r0, [pc, #160]	; (80008b0 <HAL_UART_MspInit+0x108>)
 800080e:	f000 fbc5 	bl	8000f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	4619      	mov	r1, r3
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <HAL_UART_MspInit+0x108>)
 8000828:	f000 fbb8 	bl	8000f9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	2025      	movs	r0, #37	; 0x25
 8000832:	f000 facc 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000836:	2025      	movs	r0, #37	; 0x25
 8000838:	f000 fae5 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800083c:	e030      	b.n	80008a0 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d12b      	bne.n	80008a0 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_UART_MspInit+0x104>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <HAL_UART_MspInit+0x104>)
 800084e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000852:	61d3      	str	r3, [r2, #28]
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_UART_MspInit+0x104>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_UART_MspInit+0x104>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a11      	ldr	r2, [pc, #68]	; (80008ac <HAL_UART_MspInit+0x104>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_UART_MspInit+0x104>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000878:	230c      	movs	r3, #12
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2302      	movs	r3, #2
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0318 	add.w	r3, r7, #24
 8000888:	4619      	mov	r1, r3
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_UART_MspInit+0x108>)
 800088c:	f000 fb86 	bl	8000f9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	2026      	movs	r0, #38	; 0x26
 8000896:	f000 fa9a 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800089a:	2026      	movs	r0, #38	; 0x26
 800089c:	f000 fab3 	bl	8000e06 <HAL_NVIC_EnableIRQ>
}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800
 80008b4:	40004400 	.word	0x40004400

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <HardFault_Handler+0x4>

080008ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <BusFault_Handler+0x4>

080008d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <UsageFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f94e 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <USART1_IRQHandler+0x10>)
 8000912:	f001 fa75 	bl	8001e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000498 	.word	0x20000498

08000920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if ((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE) != RESET))
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <EXTI15_10_IRQHandler+0x50>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f003 0320 	and.w	r3, r3, #32
 800093c:	2b20      	cmp	r3, #32
 800093e:	d114      	bne.n	800096a <EXTI15_10_IRQHandler+0x3e>
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <EXTI15_10_IRQHandler+0x50>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00d      	beq.n	800096a <EXTI15_10_IRQHandler+0x3e>
	{
		HAL_UART_RxCpltCallback (&huart2);
 800094e:	480b      	ldr	r0, [pc, #44]	; (800097c <EXTI15_10_IRQHandler+0x50>)
 8000950:	f001 fc0b 	bl	800216a <HAL_UART_RxCpltCallback>
		__HAL_UART_CLEAR_PEFLAG(&huart2);
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <EXTI15_10_IRQHandler+0x50>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <EXTI15_10_IRQHandler+0x50>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800096a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800096e:	f000 fc87 	bl	8001280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200008dc 	.word	0x200008dc

08000980 <_read>:
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	e00a      	b.n	80009a8 <_read+0x28>
 8000992:	f3af 8000 	nop.w
 8000996:	4601      	mov	r1, r0
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	60ba      	str	r2, [r7, #8]
 800099e:	b2ca      	uxtb	r2, r1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dbf0      	blt.n	8000992 <_read+0x12>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_write>:
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	e009      	b.n	80009e0 <_write+0x26>
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	60ba      	str	r2, [r7, #8]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fbcb 	bl	8000170 <__io_putchar>
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf1      	blt.n	80009cc <_write+0x12>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_close>:
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <_fstat>:
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <_isatty>:
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <_lseek>:
 8000a3a:	b480      	push	{r7}
 8000a3c:	b085      	sub	sp, #20
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	2300      	movs	r3, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
	...

08000a54 <_sbrk>:
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
 8000a84:	f001 fdb6 	bl	80025f4 <__errno>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20005000 	.word	0x20005000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	2000008c 	.word	0x2000008c
 8000abc:	20000928 	.word	0x20000928

08000ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <Reset_Handler>:
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopFillZerobss+0x12>)
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopFillZerobss+0x1a>)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:
 8000ad6:	58d4      	ldr	r4, [r2, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:
 8000adc:	18c4      	adds	r4, r0, r3
 8000ade:	428c      	cmp	r4, r1
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopFillZerobss+0x1e>)
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopFillZerobss+0x22>)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:
 8000aee:	42a2      	cmp	r2, r4
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>
 8000af2:	f7ff ffe5 	bl	8000ac0 <SystemInit>
 8000af6:	f001 fd83 	bl	8002600 <__libc_init_array>
 8000afa:	f7ff fc93 	bl	8000424 <main>
 8000afe:	4770      	bx	lr
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000070 	.word	0x20000070
 8000b08:	08003aac 	.word	0x08003aac
 8000b0c:	20000070 	.word	0x20000070
 8000b10:	20000928 	.word	0x20000928

08000b14 <ADC1_2_IRQHandler>:
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x28>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f945 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fe06 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f95d 	bl	8000e22 <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f925 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a03      	ldr	r2, [pc, #12]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000920 	.word	0x20000920

08000bc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000920 	.word	0x20000920

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff0 	bl	8000bc8 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_Delay+0x40>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffe0 	bl	8000bc8 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000008 	.word	0x20000008

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4906      	ldr	r1, [pc, #24]	; (8000cb8 <__NVIC_EnableIRQ+0x34>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff90 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff2d 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff42 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff90 	bl	8000d10 <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5f 	bl	8000cbc <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff35 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b085      	sub	sp, #20
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d008      	beq.n	8000e62 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2204      	movs	r2, #4
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e020      	b.n	8000ea4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 020e 	bic.w	r2, r2, #14
 8000e70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d005      	beq.n	8000ed2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2204      	movs	r2, #4
 8000eca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e051      	b.n	8000f76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 020e 	bic.w	r2, r2, #14
 8000ee0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0201 	bic.w	r2, r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <HAL_DMA_Abort_IT+0xd0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d029      	beq.n	8000f50 <HAL_DMA_Abort_IT+0xa0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <HAL_DMA_Abort_IT+0xd4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d022      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x9c>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <HAL_DMA_Abort_IT+0xd8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d01a      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x96>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_DMA_Abort_IT+0xdc>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d012      	beq.n	8000f40 <HAL_DMA_Abort_IT+0x90>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <HAL_DMA_Abort_IT+0xe0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d00a      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x8a>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1a      	ldr	r2, [pc, #104]	; (8000f94 <HAL_DMA_Abort_IT+0xe4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d102      	bne.n	8000f34 <HAL_DMA_Abort_IT+0x84>
 8000f2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f32:	e00e      	b.n	8000f52 <HAL_DMA_Abort_IT+0xa2>
 8000f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f38:	e00b      	b.n	8000f52 <HAL_DMA_Abort_IT+0xa2>
 8000f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3e:	e008      	b.n	8000f52 <HAL_DMA_Abort_IT+0xa2>
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	e005      	b.n	8000f52 <HAL_DMA_Abort_IT+0xa2>
 8000f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4a:	e002      	b.n	8000f52 <HAL_DMA_Abort_IT+0xa2>
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	e000      	b.n	8000f52 <HAL_DMA_Abort_IT+0xa2>
 8000f50:	2301      	movs	r3, #1
 8000f52:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <HAL_DMA_Abort_IT+0xe8>)
 8000f54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	4798      	blx	r3
    } 
  }
  return status;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020008 	.word	0x40020008
 8000f84:	4002001c 	.word	0x4002001c
 8000f88:	40020030 	.word	0x40020030
 8000f8c:	40020044 	.word	0x40020044
 8000f90:	40020058 	.word	0x40020058
 8000f94:	4002006c 	.word	0x4002006c
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b08b      	sub	sp, #44	; 0x2c
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fae:	e127      	b.n	8001200 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 8116 	bne.w	80011fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b12      	cmp	r3, #18
 8000fd4:	d034      	beq.n	8001040 <HAL_GPIO_Init+0xa4>
 8000fd6:	2b12      	cmp	r3, #18
 8000fd8:	d80d      	bhi.n	8000ff6 <HAL_GPIO_Init+0x5a>
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d02b      	beq.n	8001036 <HAL_GPIO_Init+0x9a>
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d804      	bhi.n	8000fec <HAL_GPIO_Init+0x50>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d031      	beq.n	800104a <HAL_GPIO_Init+0xae>
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d01c      	beq.n	8001024 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fea:	e048      	b.n	800107e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d043      	beq.n	8001078 <HAL_GPIO_Init+0xdc>
 8000ff0:	2b11      	cmp	r3, #17
 8000ff2:	d01b      	beq.n	800102c <HAL_GPIO_Init+0x90>
          break;
 8000ff4:	e043      	b.n	800107e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ff6:	4a89      	ldr	r2, [pc, #548]	; (800121c <HAL_GPIO_Init+0x280>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d026      	beq.n	800104a <HAL_GPIO_Init+0xae>
 8000ffc:	4a87      	ldr	r2, [pc, #540]	; (800121c <HAL_GPIO_Init+0x280>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d806      	bhi.n	8001010 <HAL_GPIO_Init+0x74>
 8001002:	4a87      	ldr	r2, [pc, #540]	; (8001220 <HAL_GPIO_Init+0x284>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d020      	beq.n	800104a <HAL_GPIO_Init+0xae>
 8001008:	4a86      	ldr	r2, [pc, #536]	; (8001224 <HAL_GPIO_Init+0x288>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01d      	beq.n	800104a <HAL_GPIO_Init+0xae>
          break;
 800100e:	e036      	b.n	800107e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001010:	4a85      	ldr	r2, [pc, #532]	; (8001228 <HAL_GPIO_Init+0x28c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0xae>
 8001016:	4a85      	ldr	r2, [pc, #532]	; (800122c <HAL_GPIO_Init+0x290>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d016      	beq.n	800104a <HAL_GPIO_Init+0xae>
 800101c:	4a84      	ldr	r2, [pc, #528]	; (8001230 <HAL_GPIO_Init+0x294>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0xae>
          break;
 8001022:	e02c      	b.n	800107e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	623b      	str	r3, [r7, #32]
          break;
 800102a:	e028      	b.n	800107e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	3304      	adds	r3, #4
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e023      	b.n	800107e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	3308      	adds	r3, #8
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e01e      	b.n	800107e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	330c      	adds	r3, #12
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e019      	b.n	800107e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001052:	2304      	movs	r3, #4
 8001054:	623b      	str	r3, [r7, #32]
          break;
 8001056:	e012      	b.n	800107e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d105      	bne.n	800106c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001060:	2308      	movs	r3, #8
 8001062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	611a      	str	r2, [r3, #16]
          break;
 800106a:	e008      	b.n	800107e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800106c:	2308      	movs	r3, #8
 800106e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	615a      	str	r2, [r3, #20]
          break;
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	2bff      	cmp	r3, #255	; 0xff
 8001082:	d801      	bhi.n	8001088 <HAL_GPIO_Init+0xec>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	e001      	b.n	800108c <HAL_GPIO_Init+0xf0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3304      	adds	r3, #4
 800108c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2bff      	cmp	r3, #255	; 0xff
 8001092:	d802      	bhi.n	800109a <HAL_GPIO_Init+0xfe>
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x104>
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	3b08      	subs	r3, #8
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	210f      	movs	r1, #15
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	401a      	ands	r2, r3
 80010b2:	6a39      	ldr	r1, [r7, #32]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	431a      	orrs	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8096 	beq.w	80011fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ce:	4b59      	ldr	r3, [pc, #356]	; (8001234 <HAL_GPIO_Init+0x298>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4a58      	ldr	r2, [pc, #352]	; (8001234 <HAL_GPIO_Init+0x298>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6193      	str	r3, [r2, #24]
 80010da:	4b56      	ldr	r3, [pc, #344]	; (8001234 <HAL_GPIO_Init+0x298>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e6:	4a54      	ldr	r2, [pc, #336]	; (8001238 <HAL_GPIO_Init+0x29c>)
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4013      	ands	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4b      	ldr	r2, [pc, #300]	; (800123c <HAL_GPIO_Init+0x2a0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0x19e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4a      	ldr	r2, [pc, #296]	; (8001240 <HAL_GPIO_Init+0x2a4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00d      	beq.n	8001136 <HAL_GPIO_Init+0x19a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a49      	ldr	r2, [pc, #292]	; (8001244 <HAL_GPIO_Init+0x2a8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d007      	beq.n	8001132 <HAL_GPIO_Init+0x196>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a48      	ldr	r2, [pc, #288]	; (8001248 <HAL_GPIO_Init+0x2ac>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_GPIO_Init+0x192>
 800112a:	2303      	movs	r3, #3
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x1a0>
 800112e:	2304      	movs	r3, #4
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x1a0>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x1a0>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x1a0>
 800113a:	2300      	movs	r3, #0
 800113c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800114c:	493a      	ldr	r1, [pc, #232]	; (8001238 <HAL_GPIO_Init+0x29c>)
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001166:	4b39      	ldr	r3, [pc, #228]	; (800124c <HAL_GPIO_Init+0x2b0>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4938      	ldr	r1, [pc, #224]	; (800124c <HAL_GPIO_Init+0x2b0>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001174:	4b35      	ldr	r3, [pc, #212]	; (800124c <HAL_GPIO_Init+0x2b0>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	43db      	mvns	r3, r3
 800117c:	4933      	ldr	r1, [pc, #204]	; (800124c <HAL_GPIO_Init+0x2b0>)
 800117e:	4013      	ands	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_GPIO_Init+0x2b0>)
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	492e      	ldr	r1, [pc, #184]	; (800124c <HAL_GPIO_Init+0x2b0>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
 800119a:	e006      	b.n	80011aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_GPIO_Init+0x2b0>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	4929      	ldr	r1, [pc, #164]	; (800124c <HAL_GPIO_Init+0x2b0>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_GPIO_Init+0x2b0>)
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	4924      	ldr	r1, [pc, #144]	; (800124c <HAL_GPIO_Init+0x2b0>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
 80011c2:	e006      	b.n	80011d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <HAL_GPIO_Init+0x2b0>)
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	491f      	ldr	r1, [pc, #124]	; (800124c <HAL_GPIO_Init+0x2b0>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_GPIO_Init+0x2b0>)
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	491a      	ldr	r1, [pc, #104]	; (800124c <HAL_GPIO_Init+0x2b0>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60cb      	str	r3, [r1, #12]
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_GPIO_Init+0x2b0>)
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4915      	ldr	r1, [pc, #84]	; (800124c <HAL_GPIO_Init+0x2b0>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	3301      	adds	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	fa22 f303 	lsr.w	r3, r2, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f aed0 	bne.w	8000fb0 <HAL_GPIO_Init+0x14>
  }
}
 8001210:	bf00      	nop
 8001212:	372c      	adds	r7, #44	; 0x2c
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	10210000 	.word	0x10210000
 8001220:	10110000 	.word	0x10110000
 8001224:	10120000 	.word	0x10120000
 8001228:	10310000 	.word	0x10310000
 800122c:	10320000 	.word	0x10320000
 8001230:	10220000 	.word	0x10220000
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00
 8001244:	40011000 	.word	0x40011000
 8001248:	40011400 	.word	0x40011400
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800126c:	e003      	b.n	8001276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	611a      	str	r2, [r3, #16]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f806 	bl	80012b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40010400 	.word	0x40010400

080012b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e26c      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8087 	beq.w	80013f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e4:	4b92      	ldr	r3, [pc, #584]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d00c      	beq.n	800130a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f0:	4b8f      	ldr	r3, [pc, #572]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d112      	bne.n	8001322 <HAL_RCC_OscConfig+0x5e>
 80012fc:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d10b      	bne.n	8001322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130a:	4b89      	ldr	r3, [pc, #548]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d06c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x12c>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d168      	bne.n	80013f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e246      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x76>
 800132c:	4b80      	ldr	r3, [pc, #512]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a7f      	ldr	r2, [pc, #508]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e02e      	b.n	8001398 <HAL_RCC_OscConfig+0xd4>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a7a      	ldr	r2, [pc, #488]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b78      	ldr	r3, [pc, #480]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a77      	ldr	r2, [pc, #476]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e01d      	b.n	8001398 <HAL_RCC_OscConfig+0xd4>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0xbc>
 8001366:	4b72      	ldr	r3, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a71      	ldr	r2, [pc, #452]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b6f      	ldr	r3, [pc, #444]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6e      	ldr	r2, [pc, #440]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0xd4>
 8001380:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a6a      	ldr	r2, [pc, #424]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b68      	ldr	r3, [pc, #416]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a67      	ldr	r2, [pc, #412]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc12 	bl	8000bc8 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fc0e 	bl	8000bc8 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1fa      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b5d      	ldr	r3, [pc, #372]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0xe4>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fbfe 	bl	8000bc8 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fbfa 	bl	8000bc8 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1e6      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	4b53      	ldr	r3, [pc, #332]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x10c>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d063      	beq.n	80014c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013fe:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00b      	beq.n	8001422 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b08      	cmp	r3, #8
 8001414:	d11c      	bne.n	8001450 <HAL_RCC_OscConfig+0x18c>
 8001416:	4b46      	ldr	r3, [pc, #280]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d116      	bne.n	8001450 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	4b43      	ldr	r3, [pc, #268]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_RCC_OscConfig+0x176>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1ba      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4939      	ldr	r1, [pc, #228]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	e03a      	b.n	80014c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <HAL_RCC_OscConfig+0x270>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fbb3 	bl	8000bc8 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fbaf 	bl	8000bc8 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e19b      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4927      	ldr	r1, [pc, #156]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	e015      	b.n	80014c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_RCC_OscConfig+0x270>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb92 	bl	8000bc8 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fb8e 	bl	8000bc8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e17a      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d03a      	beq.n	8001548 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d019      	beq.n	800150e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_RCC_OscConfig+0x274>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e0:	f7ff fb72 	bl	8000bc8 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fb6e 	bl	8000bc8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e15a      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001506:	2001      	movs	r0, #1
 8001508:	f000 fada 	bl	8001ac0 <RCC_Delay>
 800150c:	e01c      	b.n	8001548 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_RCC_OscConfig+0x274>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001514:	f7ff fb58 	bl	8000bc8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151a:	e00f      	b.n	800153c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fb54 	bl	8000bc8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d908      	bls.n	800153c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e140      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	42420000 	.word	0x42420000
 8001538:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	4b9e      	ldr	r3, [pc, #632]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1e9      	bne.n	800151c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a6 	beq.w	80016a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b97      	ldr	r3, [pc, #604]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10d      	bne.n	8001582 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b94      	ldr	r3, [pc, #592]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a93      	ldr	r2, [pc, #588]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b91      	ldr	r3, [pc, #580]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157e:	2301      	movs	r3, #1
 8001580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	4b8e      	ldr	r3, [pc, #568]	; (80017bc <HAL_RCC_OscConfig+0x4f8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d118      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158e:	4b8b      	ldr	r3, [pc, #556]	; (80017bc <HAL_RCC_OscConfig+0x4f8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a8a      	ldr	r2, [pc, #552]	; (80017bc <HAL_RCC_OscConfig+0x4f8>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff fb15 	bl	8000bc8 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff fb11 	bl	8000bc8 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b64      	cmp	r3, #100	; 0x64
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e0fd      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b81      	ldr	r3, [pc, #516]	; (80017bc <HAL_RCC_OscConfig+0x4f8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x312>
 80015c8:	4b7b      	ldr	r3, [pc, #492]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a7a      	ldr	r2, [pc, #488]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	e02d      	b.n	8001632 <HAL_RCC_OscConfig+0x36e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x334>
 80015de:	4b76      	ldr	r3, [pc, #472]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4a75      	ldr	r2, [pc, #468]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6213      	str	r3, [r2, #32]
 80015ea:	4b73      	ldr	r3, [pc, #460]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a72      	ldr	r2, [pc, #456]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	e01c      	b.n	8001632 <HAL_RCC_OscConfig+0x36e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0x356>
 8001600:	4b6d      	ldr	r3, [pc, #436]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4a6c      	ldr	r2, [pc, #432]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6213      	str	r3, [r2, #32]
 800160c:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a69      	ldr	r2, [pc, #420]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	e00b      	b.n	8001632 <HAL_RCC_OscConfig+0x36e>
 800161a:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a66      	ldr	r2, [pc, #408]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	4b64      	ldr	r3, [pc, #400]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a63      	ldr	r2, [pc, #396]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800162c:	f023 0304 	bic.w	r3, r3, #4
 8001630:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d015      	beq.n	8001666 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fac5 	bl	8000bc8 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fac1 	bl	8000bc8 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0ab      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001658:	4b57      	ldr	r3, [pc, #348]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ee      	beq.n	8001642 <HAL_RCC_OscConfig+0x37e>
 8001664:	e014      	b.n	8001690 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7ff faaf 	bl	8000bc8 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	e00a      	b.n	8001684 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166e:	f7ff faab 	bl	8000bc8 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	; 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e095      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1ee      	bne.n	800166e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d105      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001696:	4b48      	ldr	r3, [pc, #288]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a47      	ldr	r2, [pc, #284]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8081 	beq.w	80017ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ac:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d061      	beq.n	800177c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d146      	bne.n	800174e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c0:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_RCC_OscConfig+0x4fc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fa7f 	bl	8000bc8 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fa7b 	bl	8000bc8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e067      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e0:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d108      	bne.n	8001708 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	492d      	ldr	r1, [pc, #180]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a19      	ldr	r1, [r3, #32]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	430b      	orrs	r3, r1
 800171a:	4927      	ldr	r1, [pc, #156]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_RCC_OscConfig+0x4fc>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fa4f 	bl	8000bc8 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fa4b 	bl	8000bc8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e037      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x46a>
 800174c:	e02f      	b.n	80017ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_RCC_OscConfig+0x4fc>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fa38 	bl	8000bc8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fa34 	bl	8000bc8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e020      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x498>
 800177a:	e018      	b.n	80017ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e013      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_OscConfig+0x4f4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	429a      	cmp	r2, r3
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40007000 	.word	0x40007000
 80017c0:	42420060 	.word	0x42420060

080017c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0d0      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d910      	bls.n	8001808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b67      	ldr	r3, [pc, #412]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 0207 	bic.w	r2, r3, #7
 80017ee:	4965      	ldr	r1, [pc, #404]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b63      	ldr	r3, [pc, #396]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0b8      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d020      	beq.n	8001856 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001820:	4b59      	ldr	r3, [pc, #356]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4a58      	ldr	r2, [pc, #352]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800182a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001838:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001842:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001844:	4b50      	ldr	r3, [pc, #320]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	494d      	ldr	r1, [pc, #308]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d040      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d115      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e07f      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e073      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06b      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f023 0203 	bic.w	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4936      	ldr	r1, [pc, #216]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b4:	f7ff f988 	bl	8000bc8 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018bc:	f7ff f984 	bl	8000bc8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e053      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 020c 	and.w	r2, r3, #12
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1eb      	bne.n	80018bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d210      	bcs.n	8001914 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 0207 	bic.w	r2, r3, #7
 80018fa:	4922      	ldr	r1, [pc, #136]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e032      	b.n	800197a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4916      	ldr	r1, [pc, #88]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	490e      	ldr	r1, [pc, #56]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001952:	f000 f821 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001956:	4601      	mov	r1, r0
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	fa21 f303 	lsr.w	r3, r1, r3
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_RCC_ClockConfig+0x1cc>)
 800196c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_RCC_ClockConfig+0x1d0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f8e6 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40022000 	.word	0x40022000
 8001988:	40021000 	.word	0x40021000
 800198c:	080039f4 	.word	0x080039f4
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	b490      	push	{r4, r7}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019a0:	1d3c      	adds	r4, r7, #4
 80019a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x40>
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x46>
 80019d6:	e02d      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019da:	623b      	str	r3, [r7, #32]
      break;
 80019dc:	e02d      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ea:	4413      	add	r3, r2
 80019ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	0c5b      	lsrs	r3, r3, #17
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a16:	fb02 f203 	mul.w	r2, r2, r3
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
 8001a22:	e004      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	623b      	str	r3, [r7, #32]
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a36:	623b      	str	r3, [r7, #32]
      break;
 8001a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc90      	pop	{r4, r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	080039e0 	.word	0x080039e0
 8001a4c:	080039f0 	.word	0x080039f0
 8001a50:	40021000 	.word	0x40021000
 8001a54:	007a1200 	.word	0x007a1200
 8001a58:	003d0900 	.word	0x003d0900

08001a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	20000000 	.word	0x20000000

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff2 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001a78:	4601      	mov	r1, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08003a04 	.word	0x08003a04

08001a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	0adb      	lsrs	r3, r3, #11
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08003a04 	.word	0x08003a04

08001ac0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <RCC_Delay+0x34>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <RCC_Delay+0x38>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0a5b      	lsrs	r3, r3, #9
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001adc:	bf00      	nop
  }
  while (Delay --);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1e5a      	subs	r2, r3, #1
 8001ae2:	60fa      	str	r2, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f9      	bne.n	8001adc <RCC_Delay+0x1c>
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000
 8001af8:	10624dd3 	.word	0x10624dd3

08001afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e03f      	b.n	8001b8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe fe40 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2224      	movs	r2, #36	; 0x24
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fcc9 	bl	80024d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b08a      	sub	sp, #40	; 0x28
 8001b9a:	af02      	add	r7, sp, #8
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d17c      	bne.n	8001cb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_UART_Transmit+0x2c>
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e075      	b.n	8001cb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_UART_Transmit+0x3e>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e06e      	b.n	8001cb2 <HAL_UART_Transmit+0x11c>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2221      	movs	r2, #33	; 0x21
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bea:	f7fe ffed 	bl	8000bc8 <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	88fa      	ldrh	r2, [r7, #6]
 8001bf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	88fa      	ldrh	r2, [r7, #6]
 8001bfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c04:	d108      	bne.n	8001c18 <HAL_UART_Transmit+0x82>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d104      	bne.n	8001c18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	e003      	b.n	8001c20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c28:	e02a      	b.n	8001c80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fab5 	bl	80021a4 <UART_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e036      	b.n	8001cb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10b      	bne.n	8001c62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	e007      	b.n	8001c72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1cf      	bne.n	8001c2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2200      	movs	r2, #0
 8001c92:	2140      	movs	r1, #64	; 0x40
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fa85 	bl	80021a4 <UART_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e006      	b.n	8001cb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e000      	b.n	8001cb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cb0:	2302      	movs	r3, #2
  }
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b08a      	sub	sp, #40	; 0x28
 8001cbe:	af02      	add	r7, sp, #8
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	f040 808c 	bne.w	8001df4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_UART_Receive+0x2e>
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e084      	b.n	8001df6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_UART_Receive+0x40>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e07d      	b.n	8001df6 <HAL_UART_Receive+0x13c>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2222      	movs	r2, #34	; 0x22
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d16:	f7fe ff57 	bl	8000bc8 <HAL_GetTick>
 8001d1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	88fa      	ldrh	r2, [r7, #6]
 8001d20:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d30:	d108      	bne.n	8001d44 <HAL_UART_Receive+0x8a>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d104      	bne.n	8001d44 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e003      	b.n	8001d4c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001d54:	e043      	b.n	8001dde <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2120      	movs	r1, #32
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 fa1f 	bl	80021a4 <UART_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e042      	b.n	8001df6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	e01f      	b.n	8001dd0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d98:	d007      	beq.n	8001daa <HAL_UART_Receive+0xf0>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10a      	bne.n	8001db8 <HAL_UART_Receive+0xfe>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e008      	b.n	8001dca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1b6      	bne.n	8001d56 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_UART_IRQHandler+0x52>
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fa9b 	bl	8002386 <UART_Receive_IT>
      return;
 8001e50:	e17c      	b.n	800214c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80b1 	beq.w	8001fbc <HAL_UART_IRQHandler+0x1bc>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_UART_IRQHandler+0x70>
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80a6 	beq.w	8001fbc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_UART_IRQHandler+0x90>
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <HAL_UART_IRQHandler+0xb0>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f043 0202 	orr.w	r2, r3, #2
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_UART_IRQHandler+0xd0>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00f      	beq.n	8001efa <HAL_UART_IRQHandler+0xfa>
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d104      	bne.n	8001eee <HAL_UART_IRQHandler+0xee>
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f043 0208 	orr.w	r2, r3, #8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 811f 	beq.w	8002142 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_UART_IRQHandler+0x11e>
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fa34 	bl	8002386 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <HAL_UART_IRQHandler+0x146>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d031      	beq.n	8001faa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f976 	bl	8002238 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d023      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d013      	beq.n	8001f9a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	4a77      	ldr	r2, [pc, #476]	; (8002154 <HAL_UART_IRQHandler+0x354>)
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe ff96 	bl	8000eb0 <HAL_DMA_Abort_IT>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f94:	4610      	mov	r0, r2
 8001f96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f98:	e00e      	b.n	8001fb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8ee 	bl	800217c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa0:	e00a      	b.n	8001fb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8ea 	bl	800217c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa8:	e006      	b.n	8001fb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8e6 	bl	800217c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001fb6:	e0c4      	b.n	8002142 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb8:	bf00      	nop
    return;
 8001fba:	e0c2      	b.n	8002142 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f040 80a1 	bne.w	8002108 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 809b 	beq.w	8002108 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8095 	beq.w	8002108 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d04e      	beq.n	80020a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800200c:	8a3b      	ldrh	r3, [r7, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8099 	beq.w	8002146 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002018:	8a3a      	ldrh	r2, [r7, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	f080 8093 	bcs.w	8002146 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8a3a      	ldrh	r2, [r7, #16]
 8002024:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b20      	cmp	r3, #32
 800202e:	d02b      	beq.n	8002088 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800203e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800205e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0210 	bic.w	r2, r2, #16
 800207c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fed9 	bl	8000e3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002090:	b29b      	uxth	r3, r3
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	b29b      	uxth	r3, r3
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f878 	bl	800218e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800209e:	e052      	b.n	8002146 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d048      	beq.n	800214a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80020b8:	8a7b      	ldrh	r3, [r7, #18]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d045      	beq.n	800214a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0210 	bic.w	r2, r2, #16
 80020fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020fc:	8a7b      	ldrh	r3, [r7, #18]
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f844 	bl	800218e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002106:	e020      	b.n	800214a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_UART_IRQHandler+0x324>
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f8cb 	bl	80022b8 <UART_Transmit_IT>
    return;
 8002122:	e013      	b.n	800214c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00e      	beq.n	800214c <HAL_UART_IRQHandler+0x34c>
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f90c 	bl	8002356 <UART_EndTransmit_IT>
    return;
 800213e:	bf00      	nop
 8002140:	e004      	b.n	800214c <HAL_UART_IRQHandler+0x34c>
    return;
 8002142:	bf00      	nop
 8002144:	e002      	b.n	800214c <HAL_UART_IRQHandler+0x34c>
      return;
 8002146:	bf00      	nop
 8002148:	e000      	b.n	800214c <HAL_UART_IRQHandler+0x34c>
      return;
 800214a:	bf00      	nop
  }
}
 800214c:	3728      	adds	r7, #40	; 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	08002291 	.word	0x08002291

08002158 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	4613      	mov	r3, r2
 80021b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b4:	e02c      	b.n	8002210 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d028      	beq.n	8002210 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80021c4:	f7fe fd00 	bl	8000bc8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d21d      	bcs.n	8002210 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e00f      	b.n	8002230 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4013      	ands	r3, r2
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	429a      	cmp	r2, r3
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	429a      	cmp	r2, r3
 800222c:	d0c3      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800224e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	2b01      	cmp	r3, #1
 8002266:	d107      	bne.n	8002278 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0210 	bic.w	r2, r2, #16
 8002276:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff ff66 	bl	800217c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b21      	cmp	r3, #33	; 0x21
 80022ca:	d13e      	bne.n	800234a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d4:	d114      	bne.n	8002300 <UART_Transmit_IT+0x48>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d110      	bne.n	8002300 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	1c9a      	adds	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	621a      	str	r2, [r3, #32]
 80022fe:	e008      	b.n	8002312 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	1c59      	adds	r1, r3, #1
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6211      	str	r1, [r2, #32]
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29b      	uxth	r3, r3
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4619      	mov	r1, r3
 8002320:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002334:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002344:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800234a:	2302      	movs	r3, #2
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800236c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff feee 	bl	8002158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b22      	cmp	r3, #34	; 0x22
 8002398:	f040 8099 	bne.w	80024ce <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d117      	bne.n	80023d6 <UART_Receive_IT+0x50>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d113      	bne.n	80023d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	1c9a      	adds	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
 80023d4:	e026      	b.n	8002424 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e8:	d007      	beq.n	80023fa <UART_Receive_IT+0x74>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <UART_Receive_IT+0x82>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e008      	b.n	800241a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002414:	b2da      	uxtb	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29b      	uxth	r3, r3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4619      	mov	r1, r3
 8002432:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002434:	2b00      	cmp	r3, #0
 8002436:	d148      	bne.n	80024ca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0220 	bic.w	r2, r2, #32
 8002446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	2b01      	cmp	r3, #1
 8002476:	d123      	bne.n	80024c0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0210 	bic.w	r2, r2, #16
 800248c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b10      	cmp	r3, #16
 800249a:	d10a      	bne.n	80024b2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024b6:	4619      	mov	r1, r3
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff fe68 	bl	800218e <HAL_UARTEx_RxEventCallback>
 80024be:	e002      	b.n	80024c6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff fe52 	bl	800216a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e002      	b.n	80024d0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002512:	f023 030c 	bic.w	r3, r3, #12
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	430b      	orrs	r3, r1
 800251e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <UART_SetConfig+0x114>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d103      	bne.n	8002548 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002540:	f7ff faaa 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	e002      	b.n	800254e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002548:	f7ff fa92 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 800254c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009a      	lsls	r2, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <UART_SetConfig+0x118>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	0119      	lsls	r1, r3, #4
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009a      	lsls	r2, r3, #2
 8002578:	441a      	add	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fbb2 f2f3 	udiv	r2, r2, r3
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <UART_SetConfig+0x118>)
 8002586:	fba3 0302 	umull	r0, r3, r3, r2
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2064      	movs	r0, #100	; 0x64
 800258e:	fb00 f303 	mul.w	r3, r0, r3
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	3332      	adds	r3, #50	; 0x32
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <UART_SetConfig+0x118>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a4:	4419      	add	r1, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009a      	lsls	r2, r3, #2
 80025b0:	441a      	add	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <UART_SetConfig+0x118>)
 80025be:	fba3 0302 	umull	r0, r3, r3, r2
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2064      	movs	r0, #100	; 0x64
 80025c6:	fb00 f303 	mul.w	r3, r0, r3
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	3332      	adds	r3, #50	; 0x32
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <UART_SetConfig+0x118>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	440a      	add	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40013800 	.word	0x40013800
 80025f0:	51eb851f 	.word	0x51eb851f

080025f4 <__errno>:
 80025f4:	4b01      	ldr	r3, [pc, #4]	; (80025fc <__errno+0x8>)
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2000000c 	.word	0x2000000c

08002600 <__libc_init_array>:
 8002600:	b570      	push	{r4, r5, r6, lr}
 8002602:	2500      	movs	r5, #0
 8002604:	4e0c      	ldr	r6, [pc, #48]	; (8002638 <__libc_init_array+0x38>)
 8002606:	4c0d      	ldr	r4, [pc, #52]	; (800263c <__libc_init_array+0x3c>)
 8002608:	1ba4      	subs	r4, r4, r6
 800260a:	10a4      	asrs	r4, r4, #2
 800260c:	42a5      	cmp	r5, r4
 800260e:	d109      	bne.n	8002624 <__libc_init_array+0x24>
 8002610:	f001 f962 	bl	80038d8 <_init>
 8002614:	2500      	movs	r5, #0
 8002616:	4e0a      	ldr	r6, [pc, #40]	; (8002640 <__libc_init_array+0x40>)
 8002618:	4c0a      	ldr	r4, [pc, #40]	; (8002644 <__libc_init_array+0x44>)
 800261a:	1ba4      	subs	r4, r4, r6
 800261c:	10a4      	asrs	r4, r4, #2
 800261e:	42a5      	cmp	r5, r4
 8002620:	d105      	bne.n	800262e <__libc_init_array+0x2e>
 8002622:	bd70      	pop	{r4, r5, r6, pc}
 8002624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002628:	4798      	blx	r3
 800262a:	3501      	adds	r5, #1
 800262c:	e7ee      	b.n	800260c <__libc_init_array+0xc>
 800262e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002632:	4798      	blx	r3
 8002634:	3501      	adds	r5, #1
 8002636:	e7f2      	b.n	800261e <__libc_init_array+0x1e>
 8002638:	08003aa4 	.word	0x08003aa4
 800263c:	08003aa4 	.word	0x08003aa4
 8002640:	08003aa4 	.word	0x08003aa4
 8002644:	08003aa8 	.word	0x08003aa8

08002648 <malloc>:
 8002648:	4b02      	ldr	r3, [pc, #8]	; (8002654 <malloc+0xc>)
 800264a:	4601      	mov	r1, r0
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	f000 b857 	b.w	8002700 <_malloc_r>
 8002652:	bf00      	nop
 8002654:	2000000c 	.word	0x2000000c

08002658 <memset>:
 8002658:	4603      	mov	r3, r0
 800265a:	4402      	add	r2, r0
 800265c:	4293      	cmp	r3, r2
 800265e:	d100      	bne.n	8002662 <memset+0xa>
 8002660:	4770      	bx	lr
 8002662:	f803 1b01 	strb.w	r1, [r3], #1
 8002666:	e7f9      	b.n	800265c <memset+0x4>

08002668 <_free_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4605      	mov	r5, r0
 800266c:	2900      	cmp	r1, #0
 800266e:	d043      	beq.n	80026f8 <_free_r+0x90>
 8002670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002674:	1f0c      	subs	r4, r1, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	bfb8      	it	lt
 800267a:	18e4      	addlt	r4, r4, r3
 800267c:	f000 fefe 	bl	800347c <__malloc_lock>
 8002680:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <_free_r+0x94>)
 8002682:	6813      	ldr	r3, [r2, #0]
 8002684:	4610      	mov	r0, r2
 8002686:	b933      	cbnz	r3, 8002696 <_free_r+0x2e>
 8002688:	6063      	str	r3, [r4, #4]
 800268a:	6014      	str	r4, [r2, #0]
 800268c:	4628      	mov	r0, r5
 800268e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002692:	f000 bef4 	b.w	800347e <__malloc_unlock>
 8002696:	42a3      	cmp	r3, r4
 8002698:	d90b      	bls.n	80026b2 <_free_r+0x4a>
 800269a:	6821      	ldr	r1, [r4, #0]
 800269c:	1862      	adds	r2, r4, r1
 800269e:	4293      	cmp	r3, r2
 80026a0:	bf01      	itttt	eq
 80026a2:	681a      	ldreq	r2, [r3, #0]
 80026a4:	685b      	ldreq	r3, [r3, #4]
 80026a6:	1852      	addeq	r2, r2, r1
 80026a8:	6022      	streq	r2, [r4, #0]
 80026aa:	6063      	str	r3, [r4, #4]
 80026ac:	6004      	str	r4, [r0, #0]
 80026ae:	e7ed      	b.n	800268c <_free_r+0x24>
 80026b0:	4613      	mov	r3, r2
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	b10a      	cbz	r2, 80026ba <_free_r+0x52>
 80026b6:	42a2      	cmp	r2, r4
 80026b8:	d9fa      	bls.n	80026b0 <_free_r+0x48>
 80026ba:	6819      	ldr	r1, [r3, #0]
 80026bc:	1858      	adds	r0, r3, r1
 80026be:	42a0      	cmp	r0, r4
 80026c0:	d10b      	bne.n	80026da <_free_r+0x72>
 80026c2:	6820      	ldr	r0, [r4, #0]
 80026c4:	4401      	add	r1, r0
 80026c6:	1858      	adds	r0, r3, r1
 80026c8:	4282      	cmp	r2, r0
 80026ca:	6019      	str	r1, [r3, #0]
 80026cc:	d1de      	bne.n	800268c <_free_r+0x24>
 80026ce:	6810      	ldr	r0, [r2, #0]
 80026d0:	6852      	ldr	r2, [r2, #4]
 80026d2:	4401      	add	r1, r0
 80026d4:	6019      	str	r1, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	e7d8      	b.n	800268c <_free_r+0x24>
 80026da:	d902      	bls.n	80026e2 <_free_r+0x7a>
 80026dc:	230c      	movs	r3, #12
 80026de:	602b      	str	r3, [r5, #0]
 80026e0:	e7d4      	b.n	800268c <_free_r+0x24>
 80026e2:	6820      	ldr	r0, [r4, #0]
 80026e4:	1821      	adds	r1, r4, r0
 80026e6:	428a      	cmp	r2, r1
 80026e8:	bf01      	itttt	eq
 80026ea:	6811      	ldreq	r1, [r2, #0]
 80026ec:	6852      	ldreq	r2, [r2, #4]
 80026ee:	1809      	addeq	r1, r1, r0
 80026f0:	6021      	streq	r1, [r4, #0]
 80026f2:	6062      	str	r2, [r4, #4]
 80026f4:	605c      	str	r4, [r3, #4]
 80026f6:	e7c9      	b.n	800268c <_free_r+0x24>
 80026f8:	bd38      	pop	{r3, r4, r5, pc}
 80026fa:	bf00      	nop
 80026fc:	20000090 	.word	0x20000090

08002700 <_malloc_r>:
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	1ccd      	adds	r5, r1, #3
 8002704:	f025 0503 	bic.w	r5, r5, #3
 8002708:	3508      	adds	r5, #8
 800270a:	2d0c      	cmp	r5, #12
 800270c:	bf38      	it	cc
 800270e:	250c      	movcc	r5, #12
 8002710:	2d00      	cmp	r5, #0
 8002712:	4606      	mov	r6, r0
 8002714:	db01      	blt.n	800271a <_malloc_r+0x1a>
 8002716:	42a9      	cmp	r1, r5
 8002718:	d903      	bls.n	8002722 <_malloc_r+0x22>
 800271a:	230c      	movs	r3, #12
 800271c:	6033      	str	r3, [r6, #0]
 800271e:	2000      	movs	r0, #0
 8002720:	bd70      	pop	{r4, r5, r6, pc}
 8002722:	f000 feab 	bl	800347c <__malloc_lock>
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <_malloc_r+0xac>)
 8002728:	6814      	ldr	r4, [r2, #0]
 800272a:	4621      	mov	r1, r4
 800272c:	b991      	cbnz	r1, 8002754 <_malloc_r+0x54>
 800272e:	4c20      	ldr	r4, [pc, #128]	; (80027b0 <_malloc_r+0xb0>)
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	b91b      	cbnz	r3, 800273c <_malloc_r+0x3c>
 8002734:	4630      	mov	r0, r6
 8002736:	f000 fb7f 	bl	8002e38 <_sbrk_r>
 800273a:	6020      	str	r0, [r4, #0]
 800273c:	4629      	mov	r1, r5
 800273e:	4630      	mov	r0, r6
 8002740:	f000 fb7a 	bl	8002e38 <_sbrk_r>
 8002744:	1c43      	adds	r3, r0, #1
 8002746:	d124      	bne.n	8002792 <_malloc_r+0x92>
 8002748:	230c      	movs	r3, #12
 800274a:	4630      	mov	r0, r6
 800274c:	6033      	str	r3, [r6, #0]
 800274e:	f000 fe96 	bl	800347e <__malloc_unlock>
 8002752:	e7e4      	b.n	800271e <_malloc_r+0x1e>
 8002754:	680b      	ldr	r3, [r1, #0]
 8002756:	1b5b      	subs	r3, r3, r5
 8002758:	d418      	bmi.n	800278c <_malloc_r+0x8c>
 800275a:	2b0b      	cmp	r3, #11
 800275c:	d90f      	bls.n	800277e <_malloc_r+0x7e>
 800275e:	600b      	str	r3, [r1, #0]
 8002760:	18cc      	adds	r4, r1, r3
 8002762:	50cd      	str	r5, [r1, r3]
 8002764:	4630      	mov	r0, r6
 8002766:	f000 fe8a 	bl	800347e <__malloc_unlock>
 800276a:	f104 000b 	add.w	r0, r4, #11
 800276e:	1d23      	adds	r3, r4, #4
 8002770:	f020 0007 	bic.w	r0, r0, #7
 8002774:	1ac3      	subs	r3, r0, r3
 8002776:	d0d3      	beq.n	8002720 <_malloc_r+0x20>
 8002778:	425a      	negs	r2, r3
 800277a:	50e2      	str	r2, [r4, r3]
 800277c:	e7d0      	b.n	8002720 <_malloc_r+0x20>
 800277e:	684b      	ldr	r3, [r1, #4]
 8002780:	428c      	cmp	r4, r1
 8002782:	bf16      	itet	ne
 8002784:	6063      	strne	r3, [r4, #4]
 8002786:	6013      	streq	r3, [r2, #0]
 8002788:	460c      	movne	r4, r1
 800278a:	e7eb      	b.n	8002764 <_malloc_r+0x64>
 800278c:	460c      	mov	r4, r1
 800278e:	6849      	ldr	r1, [r1, #4]
 8002790:	e7cc      	b.n	800272c <_malloc_r+0x2c>
 8002792:	1cc4      	adds	r4, r0, #3
 8002794:	f024 0403 	bic.w	r4, r4, #3
 8002798:	42a0      	cmp	r0, r4
 800279a:	d005      	beq.n	80027a8 <_malloc_r+0xa8>
 800279c:	1a21      	subs	r1, r4, r0
 800279e:	4630      	mov	r0, r6
 80027a0:	f000 fb4a 	bl	8002e38 <_sbrk_r>
 80027a4:	3001      	adds	r0, #1
 80027a6:	d0cf      	beq.n	8002748 <_malloc_r+0x48>
 80027a8:	6025      	str	r5, [r4, #0]
 80027aa:	e7db      	b.n	8002764 <_malloc_r+0x64>
 80027ac:	20000090 	.word	0x20000090
 80027b0:	20000094 	.word	0x20000094

080027b4 <__sfputc_r>:
 80027b4:	6893      	ldr	r3, [r2, #8]
 80027b6:	b410      	push	{r4}
 80027b8:	3b01      	subs	r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	6093      	str	r3, [r2, #8]
 80027be:	da07      	bge.n	80027d0 <__sfputc_r+0x1c>
 80027c0:	6994      	ldr	r4, [r2, #24]
 80027c2:	42a3      	cmp	r3, r4
 80027c4:	db01      	blt.n	80027ca <__sfputc_r+0x16>
 80027c6:	290a      	cmp	r1, #10
 80027c8:	d102      	bne.n	80027d0 <__sfputc_r+0x1c>
 80027ca:	bc10      	pop	{r4}
 80027cc:	f000 bb86 	b.w	8002edc <__swbuf_r>
 80027d0:	6813      	ldr	r3, [r2, #0]
 80027d2:	1c58      	adds	r0, r3, #1
 80027d4:	6010      	str	r0, [r2, #0]
 80027d6:	7019      	strb	r1, [r3, #0]
 80027d8:	4608      	mov	r0, r1
 80027da:	bc10      	pop	{r4}
 80027dc:	4770      	bx	lr

080027de <__sfputs_r>:
 80027de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e0:	4606      	mov	r6, r0
 80027e2:	460f      	mov	r7, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	18d5      	adds	r5, r2, r3
 80027e8:	42ac      	cmp	r4, r5
 80027ea:	d101      	bne.n	80027f0 <__sfputs_r+0x12>
 80027ec:	2000      	movs	r0, #0
 80027ee:	e007      	b.n	8002800 <__sfputs_r+0x22>
 80027f0:	463a      	mov	r2, r7
 80027f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027f6:	4630      	mov	r0, r6
 80027f8:	f7ff ffdc 	bl	80027b4 <__sfputc_r>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d1f3      	bne.n	80027e8 <__sfputs_r+0xa>
 8002800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002804 <_vfiprintf_r>:
 8002804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002808:	460c      	mov	r4, r1
 800280a:	b09d      	sub	sp, #116	; 0x74
 800280c:	4617      	mov	r7, r2
 800280e:	461d      	mov	r5, r3
 8002810:	4606      	mov	r6, r0
 8002812:	b118      	cbz	r0, 800281c <_vfiprintf_r+0x18>
 8002814:	6983      	ldr	r3, [r0, #24]
 8002816:	b90b      	cbnz	r3, 800281c <_vfiprintf_r+0x18>
 8002818:	f000 fd10 	bl	800323c <__sinit>
 800281c:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <_vfiprintf_r+0x20c>)
 800281e:	429c      	cmp	r4, r3
 8002820:	d158      	bne.n	80028d4 <_vfiprintf_r+0xd0>
 8002822:	6874      	ldr	r4, [r6, #4]
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	0718      	lsls	r0, r3, #28
 8002828:	d55e      	bpl.n	80028e8 <_vfiprintf_r+0xe4>
 800282a:	6923      	ldr	r3, [r4, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05b      	beq.n	80028e8 <_vfiprintf_r+0xe4>
 8002830:	2300      	movs	r3, #0
 8002832:	9309      	str	r3, [sp, #36]	; 0x24
 8002834:	2320      	movs	r3, #32
 8002836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800283a:	2330      	movs	r3, #48	; 0x30
 800283c:	f04f 0b01 	mov.w	fp, #1
 8002840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002844:	9503      	str	r5, [sp, #12]
 8002846:	46b8      	mov	r8, r7
 8002848:	4645      	mov	r5, r8
 800284a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800284e:	b10b      	cbz	r3, 8002854 <_vfiprintf_r+0x50>
 8002850:	2b25      	cmp	r3, #37	; 0x25
 8002852:	d154      	bne.n	80028fe <_vfiprintf_r+0xfa>
 8002854:	ebb8 0a07 	subs.w	sl, r8, r7
 8002858:	d00b      	beq.n	8002872 <_vfiprintf_r+0x6e>
 800285a:	4653      	mov	r3, sl
 800285c:	463a      	mov	r2, r7
 800285e:	4621      	mov	r1, r4
 8002860:	4630      	mov	r0, r6
 8002862:	f7ff ffbc 	bl	80027de <__sfputs_r>
 8002866:	3001      	adds	r0, #1
 8002868:	f000 80c2 	beq.w	80029f0 <_vfiprintf_r+0x1ec>
 800286c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800286e:	4453      	add	r3, sl
 8002870:	9309      	str	r3, [sp, #36]	; 0x24
 8002872:	f898 3000 	ldrb.w	r3, [r8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80ba 	beq.w	80029f0 <_vfiprintf_r+0x1ec>
 800287c:	2300      	movs	r3, #0
 800287e:	f04f 32ff 	mov.w	r2, #4294967295
 8002882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002886:	9304      	str	r3, [sp, #16]
 8002888:	9307      	str	r3, [sp, #28]
 800288a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800288e:	931a      	str	r3, [sp, #104]	; 0x68
 8002890:	46a8      	mov	r8, r5
 8002892:	2205      	movs	r2, #5
 8002894:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002898:	485e      	ldr	r0, [pc, #376]	; (8002a14 <_vfiprintf_r+0x210>)
 800289a:	f000 fdbd 	bl	8003418 <memchr>
 800289e:	9b04      	ldr	r3, [sp, #16]
 80028a0:	bb78      	cbnz	r0, 8002902 <_vfiprintf_r+0xfe>
 80028a2:	06d9      	lsls	r1, r3, #27
 80028a4:	bf44      	itt	mi
 80028a6:	2220      	movmi	r2, #32
 80028a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028ac:	071a      	lsls	r2, r3, #28
 80028ae:	bf44      	itt	mi
 80028b0:	222b      	movmi	r2, #43	; 0x2b
 80028b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028b6:	782a      	ldrb	r2, [r5, #0]
 80028b8:	2a2a      	cmp	r2, #42	; 0x2a
 80028ba:	d02a      	beq.n	8002912 <_vfiprintf_r+0x10e>
 80028bc:	46a8      	mov	r8, r5
 80028be:	2000      	movs	r0, #0
 80028c0:	250a      	movs	r5, #10
 80028c2:	9a07      	ldr	r2, [sp, #28]
 80028c4:	4641      	mov	r1, r8
 80028c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028ca:	3b30      	subs	r3, #48	; 0x30
 80028cc:	2b09      	cmp	r3, #9
 80028ce:	d969      	bls.n	80029a4 <_vfiprintf_r+0x1a0>
 80028d0:	b360      	cbz	r0, 800292c <_vfiprintf_r+0x128>
 80028d2:	e024      	b.n	800291e <_vfiprintf_r+0x11a>
 80028d4:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <_vfiprintf_r+0x214>)
 80028d6:	429c      	cmp	r4, r3
 80028d8:	d101      	bne.n	80028de <_vfiprintf_r+0xda>
 80028da:	68b4      	ldr	r4, [r6, #8]
 80028dc:	e7a2      	b.n	8002824 <_vfiprintf_r+0x20>
 80028de:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <_vfiprintf_r+0x218>)
 80028e0:	429c      	cmp	r4, r3
 80028e2:	bf08      	it	eq
 80028e4:	68f4      	ldreq	r4, [r6, #12]
 80028e6:	e79d      	b.n	8002824 <_vfiprintf_r+0x20>
 80028e8:	4621      	mov	r1, r4
 80028ea:	4630      	mov	r0, r6
 80028ec:	f000 fb48 	bl	8002f80 <__swsetup_r>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d09d      	beq.n	8002830 <_vfiprintf_r+0x2c>
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	b01d      	add	sp, #116	; 0x74
 80028fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028fe:	46a8      	mov	r8, r5
 8002900:	e7a2      	b.n	8002848 <_vfiprintf_r+0x44>
 8002902:	4a44      	ldr	r2, [pc, #272]	; (8002a14 <_vfiprintf_r+0x210>)
 8002904:	4645      	mov	r5, r8
 8002906:	1a80      	subs	r0, r0, r2
 8002908:	fa0b f000 	lsl.w	r0, fp, r0
 800290c:	4318      	orrs	r0, r3
 800290e:	9004      	str	r0, [sp, #16]
 8002910:	e7be      	b.n	8002890 <_vfiprintf_r+0x8c>
 8002912:	9a03      	ldr	r2, [sp, #12]
 8002914:	1d11      	adds	r1, r2, #4
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	9103      	str	r1, [sp, #12]
 800291a:	2a00      	cmp	r2, #0
 800291c:	db01      	blt.n	8002922 <_vfiprintf_r+0x11e>
 800291e:	9207      	str	r2, [sp, #28]
 8002920:	e004      	b.n	800292c <_vfiprintf_r+0x128>
 8002922:	4252      	negs	r2, r2
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	9207      	str	r2, [sp, #28]
 800292a:	9304      	str	r3, [sp, #16]
 800292c:	f898 3000 	ldrb.w	r3, [r8]
 8002930:	2b2e      	cmp	r3, #46	; 0x2e
 8002932:	d10e      	bne.n	8002952 <_vfiprintf_r+0x14e>
 8002934:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002938:	2b2a      	cmp	r3, #42	; 0x2a
 800293a:	d138      	bne.n	80029ae <_vfiprintf_r+0x1aa>
 800293c:	9b03      	ldr	r3, [sp, #12]
 800293e:	f108 0802 	add.w	r8, r8, #2
 8002942:	1d1a      	adds	r2, r3, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	9203      	str	r2, [sp, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	bfb8      	it	lt
 800294c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002950:	9305      	str	r3, [sp, #20]
 8002952:	4d33      	ldr	r5, [pc, #204]	; (8002a20 <_vfiprintf_r+0x21c>)
 8002954:	2203      	movs	r2, #3
 8002956:	f898 1000 	ldrb.w	r1, [r8]
 800295a:	4628      	mov	r0, r5
 800295c:	f000 fd5c 	bl	8003418 <memchr>
 8002960:	b140      	cbz	r0, 8002974 <_vfiprintf_r+0x170>
 8002962:	2340      	movs	r3, #64	; 0x40
 8002964:	1b40      	subs	r0, r0, r5
 8002966:	fa03 f000 	lsl.w	r0, r3, r0
 800296a:	9b04      	ldr	r3, [sp, #16]
 800296c:	f108 0801 	add.w	r8, r8, #1
 8002970:	4303      	orrs	r3, r0
 8002972:	9304      	str	r3, [sp, #16]
 8002974:	f898 1000 	ldrb.w	r1, [r8]
 8002978:	2206      	movs	r2, #6
 800297a:	482a      	ldr	r0, [pc, #168]	; (8002a24 <_vfiprintf_r+0x220>)
 800297c:	f108 0701 	add.w	r7, r8, #1
 8002980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002984:	f000 fd48 	bl	8003418 <memchr>
 8002988:	2800      	cmp	r0, #0
 800298a:	d037      	beq.n	80029fc <_vfiprintf_r+0x1f8>
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <_vfiprintf_r+0x224>)
 800298e:	bb1b      	cbnz	r3, 80029d8 <_vfiprintf_r+0x1d4>
 8002990:	9b03      	ldr	r3, [sp, #12]
 8002992:	3307      	adds	r3, #7
 8002994:	f023 0307 	bic.w	r3, r3, #7
 8002998:	3308      	adds	r3, #8
 800299a:	9303      	str	r3, [sp, #12]
 800299c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800299e:	444b      	add	r3, r9
 80029a0:	9309      	str	r3, [sp, #36]	; 0x24
 80029a2:	e750      	b.n	8002846 <_vfiprintf_r+0x42>
 80029a4:	fb05 3202 	mla	r2, r5, r2, r3
 80029a8:	2001      	movs	r0, #1
 80029aa:	4688      	mov	r8, r1
 80029ac:	e78a      	b.n	80028c4 <_vfiprintf_r+0xc0>
 80029ae:	2300      	movs	r3, #0
 80029b0:	250a      	movs	r5, #10
 80029b2:	4619      	mov	r1, r3
 80029b4:	f108 0801 	add.w	r8, r8, #1
 80029b8:	9305      	str	r3, [sp, #20]
 80029ba:	4640      	mov	r0, r8
 80029bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029c0:	3a30      	subs	r2, #48	; 0x30
 80029c2:	2a09      	cmp	r2, #9
 80029c4:	d903      	bls.n	80029ce <_vfiprintf_r+0x1ca>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0c3      	beq.n	8002952 <_vfiprintf_r+0x14e>
 80029ca:	9105      	str	r1, [sp, #20]
 80029cc:	e7c1      	b.n	8002952 <_vfiprintf_r+0x14e>
 80029ce:	fb05 2101 	mla	r1, r5, r1, r2
 80029d2:	2301      	movs	r3, #1
 80029d4:	4680      	mov	r8, r0
 80029d6:	e7f0      	b.n	80029ba <_vfiprintf_r+0x1b6>
 80029d8:	ab03      	add	r3, sp, #12
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4622      	mov	r2, r4
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <_vfiprintf_r+0x228>)
 80029e0:	a904      	add	r1, sp, #16
 80029e2:	4630      	mov	r0, r6
 80029e4:	f3af 8000 	nop.w
 80029e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029ec:	4681      	mov	r9, r0
 80029ee:	d1d5      	bne.n	800299c <_vfiprintf_r+0x198>
 80029f0:	89a3      	ldrh	r3, [r4, #12]
 80029f2:	065b      	lsls	r3, r3, #25
 80029f4:	f53f af7e 	bmi.w	80028f4 <_vfiprintf_r+0xf0>
 80029f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029fa:	e77d      	b.n	80028f8 <_vfiprintf_r+0xf4>
 80029fc:	ab03      	add	r3, sp, #12
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4622      	mov	r2, r4
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <_vfiprintf_r+0x228>)
 8002a04:	a904      	add	r1, sp, #16
 8002a06:	4630      	mov	r0, r6
 8002a08:	f000 f888 	bl	8002b1c <_printf_i>
 8002a0c:	e7ec      	b.n	80029e8 <_vfiprintf_r+0x1e4>
 8002a0e:	bf00      	nop
 8002a10:	08003a64 	.word	0x08003a64
 8002a14:	08003a10 	.word	0x08003a10
 8002a18:	08003a84 	.word	0x08003a84
 8002a1c:	08003a44 	.word	0x08003a44
 8002a20:	08003a16 	.word	0x08003a16
 8002a24:	08003a1a 	.word	0x08003a1a
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	080027df 	.word	0x080027df

08002a30 <_printf_common>:
 8002a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a34:	4691      	mov	r9, r2
 8002a36:	461f      	mov	r7, r3
 8002a38:	688a      	ldr	r2, [r1, #8]
 8002a3a:	690b      	ldr	r3, [r1, #16]
 8002a3c:	4606      	mov	r6, r0
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	bfb8      	it	lt
 8002a42:	4613      	movlt	r3, r2
 8002a44:	f8c9 3000 	str.w	r3, [r9]
 8002a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a4c:	460c      	mov	r4, r1
 8002a4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a52:	b112      	cbz	r2, 8002a5a <_printf_common+0x2a>
 8002a54:	3301      	adds	r3, #1
 8002a56:	f8c9 3000 	str.w	r3, [r9]
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	0699      	lsls	r1, r3, #26
 8002a5e:	bf42      	ittt	mi
 8002a60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a64:	3302      	addmi	r3, #2
 8002a66:	f8c9 3000 	strmi.w	r3, [r9]
 8002a6a:	6825      	ldr	r5, [r4, #0]
 8002a6c:	f015 0506 	ands.w	r5, r5, #6
 8002a70:	d107      	bne.n	8002a82 <_printf_common+0x52>
 8002a72:	f104 0a19 	add.w	sl, r4, #25
 8002a76:	68e3      	ldr	r3, [r4, #12]
 8002a78:	f8d9 2000 	ldr.w	r2, [r9]
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	42ab      	cmp	r3, r5
 8002a80:	dc29      	bgt.n	8002ad6 <_printf_common+0xa6>
 8002a82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a86:	6822      	ldr	r2, [r4, #0]
 8002a88:	3300      	adds	r3, #0
 8002a8a:	bf18      	it	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	0692      	lsls	r2, r2, #26
 8002a90:	d42e      	bmi.n	8002af0 <_printf_common+0xc0>
 8002a92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a96:	4639      	mov	r1, r7
 8002a98:	4630      	mov	r0, r6
 8002a9a:	47c0      	blx	r8
 8002a9c:	3001      	adds	r0, #1
 8002a9e:	d021      	beq.n	8002ae4 <_printf_common+0xb4>
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	68e5      	ldr	r5, [r4, #12]
 8002aa4:	f003 0306 	and.w	r3, r3, #6
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	bf18      	it	ne
 8002aac:	2500      	movne	r5, #0
 8002aae:	f8d9 2000 	ldr.w	r2, [r9]
 8002ab2:	f04f 0900 	mov.w	r9, #0
 8002ab6:	bf08      	it	eq
 8002ab8:	1aad      	subeq	r5, r5, r2
 8002aba:	68a3      	ldr	r3, [r4, #8]
 8002abc:	6922      	ldr	r2, [r4, #16]
 8002abe:	bf08      	it	eq
 8002ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bfc4      	itt	gt
 8002ac8:	1a9b      	subgt	r3, r3, r2
 8002aca:	18ed      	addgt	r5, r5, r3
 8002acc:	341a      	adds	r4, #26
 8002ace:	454d      	cmp	r5, r9
 8002ad0:	d11a      	bne.n	8002b08 <_printf_common+0xd8>
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	e008      	b.n	8002ae8 <_printf_common+0xb8>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	4652      	mov	r2, sl
 8002ada:	4639      	mov	r1, r7
 8002adc:	4630      	mov	r0, r6
 8002ade:	47c0      	blx	r8
 8002ae0:	3001      	adds	r0, #1
 8002ae2:	d103      	bne.n	8002aec <_printf_common+0xbc>
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aec:	3501      	adds	r5, #1
 8002aee:	e7c2      	b.n	8002a76 <_printf_common+0x46>
 8002af0:	2030      	movs	r0, #48	; 0x30
 8002af2:	18e1      	adds	r1, r4, r3
 8002af4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002afe:	4422      	add	r2, r4
 8002b00:	3302      	adds	r3, #2
 8002b02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b06:	e7c4      	b.n	8002a92 <_printf_common+0x62>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	4622      	mov	r2, r4
 8002b0c:	4639      	mov	r1, r7
 8002b0e:	4630      	mov	r0, r6
 8002b10:	47c0      	blx	r8
 8002b12:	3001      	adds	r0, #1
 8002b14:	d0e6      	beq.n	8002ae4 <_printf_common+0xb4>
 8002b16:	f109 0901 	add.w	r9, r9, #1
 8002b1a:	e7d8      	b.n	8002ace <_printf_common+0x9e>

08002b1c <_printf_i>:
 8002b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b24:	460c      	mov	r4, r1
 8002b26:	7e09      	ldrb	r1, [r1, #24]
 8002b28:	b085      	sub	sp, #20
 8002b2a:	296e      	cmp	r1, #110	; 0x6e
 8002b2c:	4617      	mov	r7, r2
 8002b2e:	4606      	mov	r6, r0
 8002b30:	4698      	mov	r8, r3
 8002b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b34:	f000 80b3 	beq.w	8002c9e <_printf_i+0x182>
 8002b38:	d822      	bhi.n	8002b80 <_printf_i+0x64>
 8002b3a:	2963      	cmp	r1, #99	; 0x63
 8002b3c:	d036      	beq.n	8002bac <_printf_i+0x90>
 8002b3e:	d80a      	bhi.n	8002b56 <_printf_i+0x3a>
 8002b40:	2900      	cmp	r1, #0
 8002b42:	f000 80b9 	beq.w	8002cb8 <_printf_i+0x19c>
 8002b46:	2958      	cmp	r1, #88	; 0x58
 8002b48:	f000 8083 	beq.w	8002c52 <_printf_i+0x136>
 8002b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b54:	e032      	b.n	8002bbc <_printf_i+0xa0>
 8002b56:	2964      	cmp	r1, #100	; 0x64
 8002b58:	d001      	beq.n	8002b5e <_printf_i+0x42>
 8002b5a:	2969      	cmp	r1, #105	; 0x69
 8002b5c:	d1f6      	bne.n	8002b4c <_printf_i+0x30>
 8002b5e:	6820      	ldr	r0, [r4, #0]
 8002b60:	6813      	ldr	r3, [r2, #0]
 8002b62:	0605      	lsls	r5, r0, #24
 8002b64:	f103 0104 	add.w	r1, r3, #4
 8002b68:	d52a      	bpl.n	8002bc0 <_printf_i+0xa4>
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6011      	str	r1, [r2, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da03      	bge.n	8002b7a <_printf_i+0x5e>
 8002b72:	222d      	movs	r2, #45	; 0x2d
 8002b74:	425b      	negs	r3, r3
 8002b76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b7a:	486f      	ldr	r0, [pc, #444]	; (8002d38 <_printf_i+0x21c>)
 8002b7c:	220a      	movs	r2, #10
 8002b7e:	e039      	b.n	8002bf4 <_printf_i+0xd8>
 8002b80:	2973      	cmp	r1, #115	; 0x73
 8002b82:	f000 809d 	beq.w	8002cc0 <_printf_i+0x1a4>
 8002b86:	d808      	bhi.n	8002b9a <_printf_i+0x7e>
 8002b88:	296f      	cmp	r1, #111	; 0x6f
 8002b8a:	d020      	beq.n	8002bce <_printf_i+0xb2>
 8002b8c:	2970      	cmp	r1, #112	; 0x70
 8002b8e:	d1dd      	bne.n	8002b4c <_printf_i+0x30>
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	f043 0320 	orr.w	r3, r3, #32
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	e003      	b.n	8002ba2 <_printf_i+0x86>
 8002b9a:	2975      	cmp	r1, #117	; 0x75
 8002b9c:	d017      	beq.n	8002bce <_printf_i+0xb2>
 8002b9e:	2978      	cmp	r1, #120	; 0x78
 8002ba0:	d1d4      	bne.n	8002b4c <_printf_i+0x30>
 8002ba2:	2378      	movs	r3, #120	; 0x78
 8002ba4:	4865      	ldr	r0, [pc, #404]	; (8002d3c <_printf_i+0x220>)
 8002ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002baa:	e055      	b.n	8002c58 <_printf_i+0x13c>
 8002bac:	6813      	ldr	r3, [r2, #0]
 8002bae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bb2:	1d19      	adds	r1, r3, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6011      	str	r1, [r2, #0]
 8002bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e08c      	b.n	8002cda <_printf_i+0x1be>
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bc6:	6011      	str	r1, [r2, #0]
 8002bc8:	bf18      	it	ne
 8002bca:	b21b      	sxthne	r3, r3
 8002bcc:	e7cf      	b.n	8002b6e <_printf_i+0x52>
 8002bce:	6813      	ldr	r3, [r2, #0]
 8002bd0:	6825      	ldr	r5, [r4, #0]
 8002bd2:	1d18      	adds	r0, r3, #4
 8002bd4:	6010      	str	r0, [r2, #0]
 8002bd6:	0628      	lsls	r0, r5, #24
 8002bd8:	d501      	bpl.n	8002bde <_printf_i+0xc2>
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	e002      	b.n	8002be4 <_printf_i+0xc8>
 8002bde:	0668      	lsls	r0, r5, #25
 8002be0:	d5fb      	bpl.n	8002bda <_printf_i+0xbe>
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	296f      	cmp	r1, #111	; 0x6f
 8002be6:	bf14      	ite	ne
 8002be8:	220a      	movne	r2, #10
 8002bea:	2208      	moveq	r2, #8
 8002bec:	4852      	ldr	r0, [pc, #328]	; (8002d38 <_printf_i+0x21c>)
 8002bee:	2100      	movs	r1, #0
 8002bf0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bf4:	6865      	ldr	r5, [r4, #4]
 8002bf6:	2d00      	cmp	r5, #0
 8002bf8:	60a5      	str	r5, [r4, #8]
 8002bfa:	f2c0 8095 	blt.w	8002d28 <_printf_i+0x20c>
 8002bfe:	6821      	ldr	r1, [r4, #0]
 8002c00:	f021 0104 	bic.w	r1, r1, #4
 8002c04:	6021      	str	r1, [r4, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d13d      	bne.n	8002c86 <_printf_i+0x16a>
 8002c0a:	2d00      	cmp	r5, #0
 8002c0c:	f040 808e 	bne.w	8002d2c <_printf_i+0x210>
 8002c10:	4665      	mov	r5, ip
 8002c12:	2a08      	cmp	r2, #8
 8002c14:	d10b      	bne.n	8002c2e <_printf_i+0x112>
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	07db      	lsls	r3, r3, #31
 8002c1a:	d508      	bpl.n	8002c2e <_printf_i+0x112>
 8002c1c:	6923      	ldr	r3, [r4, #16]
 8002c1e:	6862      	ldr	r2, [r4, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	bfde      	ittt	le
 8002c24:	2330      	movle	r3, #48	; 0x30
 8002c26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c2e:	ebac 0305 	sub.w	r3, ip, r5
 8002c32:	6123      	str	r3, [r4, #16]
 8002c34:	f8cd 8000 	str.w	r8, [sp]
 8002c38:	463b      	mov	r3, r7
 8002c3a:	aa03      	add	r2, sp, #12
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	4630      	mov	r0, r6
 8002c40:	f7ff fef6 	bl	8002a30 <_printf_common>
 8002c44:	3001      	adds	r0, #1
 8002c46:	d14d      	bne.n	8002ce4 <_printf_i+0x1c8>
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	b005      	add	sp, #20
 8002c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c52:	4839      	ldr	r0, [pc, #228]	; (8002d38 <_printf_i+0x21c>)
 8002c54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c58:	6813      	ldr	r3, [r2, #0]
 8002c5a:	6821      	ldr	r1, [r4, #0]
 8002c5c:	1d1d      	adds	r5, r3, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6015      	str	r5, [r2, #0]
 8002c62:	060a      	lsls	r2, r1, #24
 8002c64:	d50b      	bpl.n	8002c7e <_printf_i+0x162>
 8002c66:	07ca      	lsls	r2, r1, #31
 8002c68:	bf44      	itt	mi
 8002c6a:	f041 0120 	orrmi.w	r1, r1, #32
 8002c6e:	6021      	strmi	r1, [r4, #0]
 8002c70:	b91b      	cbnz	r3, 8002c7a <_printf_i+0x15e>
 8002c72:	6822      	ldr	r2, [r4, #0]
 8002c74:	f022 0220 	bic.w	r2, r2, #32
 8002c78:	6022      	str	r2, [r4, #0]
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	e7b7      	b.n	8002bee <_printf_i+0xd2>
 8002c7e:	064d      	lsls	r5, r1, #25
 8002c80:	bf48      	it	mi
 8002c82:	b29b      	uxthmi	r3, r3
 8002c84:	e7ef      	b.n	8002c66 <_printf_i+0x14a>
 8002c86:	4665      	mov	r5, ip
 8002c88:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c8c:	fb02 3311 	mls	r3, r2, r1, r3
 8002c90:	5cc3      	ldrb	r3, [r0, r3]
 8002c92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c96:	460b      	mov	r3, r1
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	d1f5      	bne.n	8002c88 <_printf_i+0x16c>
 8002c9c:	e7b9      	b.n	8002c12 <_printf_i+0xf6>
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	6825      	ldr	r5, [r4, #0]
 8002ca2:	1d18      	adds	r0, r3, #4
 8002ca4:	6961      	ldr	r1, [r4, #20]
 8002ca6:	6010      	str	r0, [r2, #0]
 8002ca8:	0628      	lsls	r0, r5, #24
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	d501      	bpl.n	8002cb2 <_printf_i+0x196>
 8002cae:	6019      	str	r1, [r3, #0]
 8002cb0:	e002      	b.n	8002cb8 <_printf_i+0x19c>
 8002cb2:	066a      	lsls	r2, r5, #25
 8002cb4:	d5fb      	bpl.n	8002cae <_printf_i+0x192>
 8002cb6:	8019      	strh	r1, [r3, #0]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	4665      	mov	r5, ip
 8002cbc:	6123      	str	r3, [r4, #16]
 8002cbe:	e7b9      	b.n	8002c34 <_printf_i+0x118>
 8002cc0:	6813      	ldr	r3, [r2, #0]
 8002cc2:	1d19      	adds	r1, r3, #4
 8002cc4:	6011      	str	r1, [r2, #0]
 8002cc6:	681d      	ldr	r5, [r3, #0]
 8002cc8:	6862      	ldr	r2, [r4, #4]
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4628      	mov	r0, r5
 8002cce:	f000 fba3 	bl	8003418 <memchr>
 8002cd2:	b108      	cbz	r0, 8002cd8 <_printf_i+0x1bc>
 8002cd4:	1b40      	subs	r0, r0, r5
 8002cd6:	6060      	str	r0, [r4, #4]
 8002cd8:	6863      	ldr	r3, [r4, #4]
 8002cda:	6123      	str	r3, [r4, #16]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce2:	e7a7      	b.n	8002c34 <_printf_i+0x118>
 8002ce4:	6923      	ldr	r3, [r4, #16]
 8002ce6:	462a      	mov	r2, r5
 8002ce8:	4639      	mov	r1, r7
 8002cea:	4630      	mov	r0, r6
 8002cec:	47c0      	blx	r8
 8002cee:	3001      	adds	r0, #1
 8002cf0:	d0aa      	beq.n	8002c48 <_printf_i+0x12c>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	079b      	lsls	r3, r3, #30
 8002cf6:	d413      	bmi.n	8002d20 <_printf_i+0x204>
 8002cf8:	68e0      	ldr	r0, [r4, #12]
 8002cfa:	9b03      	ldr	r3, [sp, #12]
 8002cfc:	4298      	cmp	r0, r3
 8002cfe:	bfb8      	it	lt
 8002d00:	4618      	movlt	r0, r3
 8002d02:	e7a3      	b.n	8002c4c <_printf_i+0x130>
 8002d04:	2301      	movs	r3, #1
 8002d06:	464a      	mov	r2, r9
 8002d08:	4639      	mov	r1, r7
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	47c0      	blx	r8
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d09a      	beq.n	8002c48 <_printf_i+0x12c>
 8002d12:	3501      	adds	r5, #1
 8002d14:	68e3      	ldr	r3, [r4, #12]
 8002d16:	9a03      	ldr	r2, [sp, #12]
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	42ab      	cmp	r3, r5
 8002d1c:	dcf2      	bgt.n	8002d04 <_printf_i+0x1e8>
 8002d1e:	e7eb      	b.n	8002cf8 <_printf_i+0x1dc>
 8002d20:	2500      	movs	r5, #0
 8002d22:	f104 0919 	add.w	r9, r4, #25
 8002d26:	e7f5      	b.n	8002d14 <_printf_i+0x1f8>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ac      	bne.n	8002c86 <_printf_i+0x16a>
 8002d2c:	7803      	ldrb	r3, [r0, #0]
 8002d2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d36:	e76c      	b.n	8002c12 <_printf_i+0xf6>
 8002d38:	08003a21 	.word	0x08003a21
 8002d3c:	08003a32 	.word	0x08003a32

08002d40 <iprintf>:
 8002d40:	b40f      	push	{r0, r1, r2, r3}
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <iprintf+0x2c>)
 8002d44:	b513      	push	{r0, r1, r4, lr}
 8002d46:	681c      	ldr	r4, [r3, #0]
 8002d48:	b124      	cbz	r4, 8002d54 <iprintf+0x14>
 8002d4a:	69a3      	ldr	r3, [r4, #24]
 8002d4c:	b913      	cbnz	r3, 8002d54 <iprintf+0x14>
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f000 fa74 	bl	800323c <__sinit>
 8002d54:	ab05      	add	r3, sp, #20
 8002d56:	9a04      	ldr	r2, [sp, #16]
 8002d58:	68a1      	ldr	r1, [r4, #8]
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	f7ff fd51 	bl	8002804 <_vfiprintf_r>
 8002d62:	b002      	add	sp, #8
 8002d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d68:	b004      	add	sp, #16
 8002d6a:	4770      	bx	lr
 8002d6c:	2000000c 	.word	0x2000000c

08002d70 <_puts_r>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	460e      	mov	r6, r1
 8002d74:	4605      	mov	r5, r0
 8002d76:	b118      	cbz	r0, 8002d80 <_puts_r+0x10>
 8002d78:	6983      	ldr	r3, [r0, #24]
 8002d7a:	b90b      	cbnz	r3, 8002d80 <_puts_r+0x10>
 8002d7c:	f000 fa5e 	bl	800323c <__sinit>
 8002d80:	69ab      	ldr	r3, [r5, #24]
 8002d82:	68ac      	ldr	r4, [r5, #8]
 8002d84:	b913      	cbnz	r3, 8002d8c <_puts_r+0x1c>
 8002d86:	4628      	mov	r0, r5
 8002d88:	f000 fa58 	bl	800323c <__sinit>
 8002d8c:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <_puts_r+0xac>)
 8002d8e:	429c      	cmp	r4, r3
 8002d90:	d117      	bne.n	8002dc2 <_puts_r+0x52>
 8002d92:	686c      	ldr	r4, [r5, #4]
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	071b      	lsls	r3, r3, #28
 8002d98:	d51d      	bpl.n	8002dd6 <_puts_r+0x66>
 8002d9a:	6923      	ldr	r3, [r4, #16]
 8002d9c:	b1db      	cbz	r3, 8002dd6 <_puts_r+0x66>
 8002d9e:	3e01      	subs	r6, #1
 8002da0:	68a3      	ldr	r3, [r4, #8]
 8002da2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002da6:	3b01      	subs	r3, #1
 8002da8:	60a3      	str	r3, [r4, #8]
 8002daa:	b9e9      	cbnz	r1, 8002de8 <_puts_r+0x78>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	da2e      	bge.n	8002e0e <_puts_r+0x9e>
 8002db0:	4622      	mov	r2, r4
 8002db2:	210a      	movs	r1, #10
 8002db4:	4628      	mov	r0, r5
 8002db6:	f000 f891 	bl	8002edc <__swbuf_r>
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d011      	beq.n	8002de2 <_puts_r+0x72>
 8002dbe:	200a      	movs	r0, #10
 8002dc0:	e011      	b.n	8002de6 <_puts_r+0x76>
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <_puts_r+0xb0>)
 8002dc4:	429c      	cmp	r4, r3
 8002dc6:	d101      	bne.n	8002dcc <_puts_r+0x5c>
 8002dc8:	68ac      	ldr	r4, [r5, #8]
 8002dca:	e7e3      	b.n	8002d94 <_puts_r+0x24>
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <_puts_r+0xb4>)
 8002dce:	429c      	cmp	r4, r3
 8002dd0:	bf08      	it	eq
 8002dd2:	68ec      	ldreq	r4, [r5, #12]
 8002dd4:	e7de      	b.n	8002d94 <_puts_r+0x24>
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f000 f8d1 	bl	8002f80 <__swsetup_r>
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d0dd      	beq.n	8002d9e <_puts_r+0x2e>
 8002de2:	f04f 30ff 	mov.w	r0, #4294967295
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	da04      	bge.n	8002df6 <_puts_r+0x86>
 8002dec:	69a2      	ldr	r2, [r4, #24]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	dc06      	bgt.n	8002e00 <_puts_r+0x90>
 8002df2:	290a      	cmp	r1, #10
 8002df4:	d004      	beq.n	8002e00 <_puts_r+0x90>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	6022      	str	r2, [r4, #0]
 8002dfc:	7019      	strb	r1, [r3, #0]
 8002dfe:	e7cf      	b.n	8002da0 <_puts_r+0x30>
 8002e00:	4622      	mov	r2, r4
 8002e02:	4628      	mov	r0, r5
 8002e04:	f000 f86a 	bl	8002edc <__swbuf_r>
 8002e08:	3001      	adds	r0, #1
 8002e0a:	d1c9      	bne.n	8002da0 <_puts_r+0x30>
 8002e0c:	e7e9      	b.n	8002de2 <_puts_r+0x72>
 8002e0e:	200a      	movs	r0, #10
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	6022      	str	r2, [r4, #0]
 8002e16:	7018      	strb	r0, [r3, #0]
 8002e18:	e7e5      	b.n	8002de6 <_puts_r+0x76>
 8002e1a:	bf00      	nop
 8002e1c:	08003a64 	.word	0x08003a64
 8002e20:	08003a84 	.word	0x08003a84
 8002e24:	08003a44 	.word	0x08003a44

08002e28 <puts>:
 8002e28:	4b02      	ldr	r3, [pc, #8]	; (8002e34 <puts+0xc>)
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	f7ff bf9f 	b.w	8002d70 <_puts_r>
 8002e32:	bf00      	nop
 8002e34:	2000000c 	.word	0x2000000c

08002e38 <_sbrk_r>:
 8002e38:	b538      	push	{r3, r4, r5, lr}
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	4c05      	ldr	r4, [pc, #20]	; (8002e54 <_sbrk_r+0x1c>)
 8002e3e:	4605      	mov	r5, r0
 8002e40:	4608      	mov	r0, r1
 8002e42:	6023      	str	r3, [r4, #0]
 8002e44:	f7fd fe06 	bl	8000a54 <_sbrk>
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	d102      	bne.n	8002e52 <_sbrk_r+0x1a>
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	b103      	cbz	r3, 8002e52 <_sbrk_r+0x1a>
 8002e50:	602b      	str	r3, [r5, #0]
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
 8002e54:	20000924 	.word	0x20000924

08002e58 <siprintf>:
 8002e58:	b40e      	push	{r1, r2, r3}
 8002e5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e5e:	b500      	push	{lr}
 8002e60:	b09c      	sub	sp, #112	; 0x70
 8002e62:	ab1d      	add	r3, sp, #116	; 0x74
 8002e64:	9002      	str	r0, [sp, #8]
 8002e66:	9006      	str	r0, [sp, #24]
 8002e68:	9107      	str	r1, [sp, #28]
 8002e6a:	9104      	str	r1, [sp, #16]
 8002e6c:	4808      	ldr	r0, [pc, #32]	; (8002e90 <siprintf+0x38>)
 8002e6e:	4909      	ldr	r1, [pc, #36]	; (8002e94 <siprintf+0x3c>)
 8002e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e74:	9105      	str	r1, [sp, #20]
 8002e76:	6800      	ldr	r0, [r0, #0]
 8002e78:	a902      	add	r1, sp, #8
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	f000 fb80 	bl	8003580 <_svfiprintf_r>
 8002e80:	2200      	movs	r2, #0
 8002e82:	9b02      	ldr	r3, [sp, #8]
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	b01c      	add	sp, #112	; 0x70
 8002e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e8c:	b003      	add	sp, #12
 8002e8e:	4770      	bx	lr
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	ffff0208 	.word	0xffff0208

08002e98 <strchr>:
 8002e98:	b2c9      	uxtb	r1, r1
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ea0:	b11a      	cbz	r2, 8002eaa <strchr+0x12>
 8002ea2:	428a      	cmp	r2, r1
 8002ea4:	d1f9      	bne.n	8002e9a <strchr+0x2>
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4770      	bx	lr
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	bf18      	it	ne
 8002eae:	2300      	movne	r3, #0
 8002eb0:	e7f9      	b.n	8002ea6 <strchr+0xe>

08002eb2 <strncpy>:
 8002eb2:	b570      	push	{r4, r5, r6, lr}
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	3901      	subs	r1, #1
 8002eb8:	b902      	cbnz	r2, 8002ebc <strncpy+0xa>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	4623      	mov	r3, r4
 8002ebe:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8002ec2:	1e56      	subs	r6, r2, #1
 8002ec4:	f803 5b01 	strb.w	r5, [r3], #1
 8002ec8:	b92d      	cbnz	r5, 8002ed6 <strncpy+0x24>
 8002eca:	4414      	add	r4, r2
 8002ecc:	42a3      	cmp	r3, r4
 8002ece:	d0f4      	beq.n	8002eba <strncpy+0x8>
 8002ed0:	f803 5b01 	strb.w	r5, [r3], #1
 8002ed4:	e7fa      	b.n	8002ecc <strncpy+0x1a>
 8002ed6:	461c      	mov	r4, r3
 8002ed8:	4632      	mov	r2, r6
 8002eda:	e7ed      	b.n	8002eb8 <strncpy+0x6>

08002edc <__swbuf_r>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	460e      	mov	r6, r1
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	4605      	mov	r5, r0
 8002ee4:	b118      	cbz	r0, 8002eee <__swbuf_r+0x12>
 8002ee6:	6983      	ldr	r3, [r0, #24]
 8002ee8:	b90b      	cbnz	r3, 8002eee <__swbuf_r+0x12>
 8002eea:	f000 f9a7 	bl	800323c <__sinit>
 8002eee:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <__swbuf_r+0x98>)
 8002ef0:	429c      	cmp	r4, r3
 8002ef2:	d12a      	bne.n	8002f4a <__swbuf_r+0x6e>
 8002ef4:	686c      	ldr	r4, [r5, #4]
 8002ef6:	69a3      	ldr	r3, [r4, #24]
 8002ef8:	60a3      	str	r3, [r4, #8]
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	071a      	lsls	r2, r3, #28
 8002efe:	d52e      	bpl.n	8002f5e <__swbuf_r+0x82>
 8002f00:	6923      	ldr	r3, [r4, #16]
 8002f02:	b363      	cbz	r3, 8002f5e <__swbuf_r+0x82>
 8002f04:	6923      	ldr	r3, [r4, #16]
 8002f06:	6820      	ldr	r0, [r4, #0]
 8002f08:	b2f6      	uxtb	r6, r6
 8002f0a:	1ac0      	subs	r0, r0, r3
 8002f0c:	6963      	ldr	r3, [r4, #20]
 8002f0e:	4637      	mov	r7, r6
 8002f10:	4283      	cmp	r3, r0
 8002f12:	dc04      	bgt.n	8002f1e <__swbuf_r+0x42>
 8002f14:	4621      	mov	r1, r4
 8002f16:	4628      	mov	r0, r5
 8002f18:	f000 f926 	bl	8003168 <_fflush_r>
 8002f1c:	bb28      	cbnz	r0, 8002f6a <__swbuf_r+0x8e>
 8002f1e:	68a3      	ldr	r3, [r4, #8]
 8002f20:	3001      	adds	r0, #1
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60a3      	str	r3, [r4, #8]
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	6022      	str	r2, [r4, #0]
 8002f2c:	701e      	strb	r6, [r3, #0]
 8002f2e:	6963      	ldr	r3, [r4, #20]
 8002f30:	4283      	cmp	r3, r0
 8002f32:	d004      	beq.n	8002f3e <__swbuf_r+0x62>
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	07db      	lsls	r3, r3, #31
 8002f38:	d519      	bpl.n	8002f6e <__swbuf_r+0x92>
 8002f3a:	2e0a      	cmp	r6, #10
 8002f3c:	d117      	bne.n	8002f6e <__swbuf_r+0x92>
 8002f3e:	4621      	mov	r1, r4
 8002f40:	4628      	mov	r0, r5
 8002f42:	f000 f911 	bl	8003168 <_fflush_r>
 8002f46:	b190      	cbz	r0, 8002f6e <__swbuf_r+0x92>
 8002f48:	e00f      	b.n	8002f6a <__swbuf_r+0x8e>
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <__swbuf_r+0x9c>)
 8002f4c:	429c      	cmp	r4, r3
 8002f4e:	d101      	bne.n	8002f54 <__swbuf_r+0x78>
 8002f50:	68ac      	ldr	r4, [r5, #8]
 8002f52:	e7d0      	b.n	8002ef6 <__swbuf_r+0x1a>
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <__swbuf_r+0xa0>)
 8002f56:	429c      	cmp	r4, r3
 8002f58:	bf08      	it	eq
 8002f5a:	68ec      	ldreq	r4, [r5, #12]
 8002f5c:	e7cb      	b.n	8002ef6 <__swbuf_r+0x1a>
 8002f5e:	4621      	mov	r1, r4
 8002f60:	4628      	mov	r0, r5
 8002f62:	f000 f80d 	bl	8002f80 <__swsetup_r>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d0cc      	beq.n	8002f04 <__swbuf_r+0x28>
 8002f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8002f6e:	4638      	mov	r0, r7
 8002f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f72:	bf00      	nop
 8002f74:	08003a64 	.word	0x08003a64
 8002f78:	08003a84 	.word	0x08003a84
 8002f7c:	08003a44 	.word	0x08003a44

08002f80 <__swsetup_r>:
 8002f80:	4b32      	ldr	r3, [pc, #200]	; (800304c <__swsetup_r+0xcc>)
 8002f82:	b570      	push	{r4, r5, r6, lr}
 8002f84:	681d      	ldr	r5, [r3, #0]
 8002f86:	4606      	mov	r6, r0
 8002f88:	460c      	mov	r4, r1
 8002f8a:	b125      	cbz	r5, 8002f96 <__swsetup_r+0x16>
 8002f8c:	69ab      	ldr	r3, [r5, #24]
 8002f8e:	b913      	cbnz	r3, 8002f96 <__swsetup_r+0x16>
 8002f90:	4628      	mov	r0, r5
 8002f92:	f000 f953 	bl	800323c <__sinit>
 8002f96:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <__swsetup_r+0xd0>)
 8002f98:	429c      	cmp	r4, r3
 8002f9a:	d10f      	bne.n	8002fbc <__swsetup_r+0x3c>
 8002f9c:	686c      	ldr	r4, [r5, #4]
 8002f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	0715      	lsls	r5, r2, #28
 8002fa6:	d42c      	bmi.n	8003002 <__swsetup_r+0x82>
 8002fa8:	06d0      	lsls	r0, r2, #27
 8002faa:	d411      	bmi.n	8002fd0 <__swsetup_r+0x50>
 8002fac:	2209      	movs	r2, #9
 8002fae:	6032      	str	r2, [r6, #0]
 8002fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb4:	81a3      	strh	r3, [r4, #12]
 8002fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fba:	e03e      	b.n	800303a <__swsetup_r+0xba>
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <__swsetup_r+0xd4>)
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	d101      	bne.n	8002fc6 <__swsetup_r+0x46>
 8002fc2:	68ac      	ldr	r4, [r5, #8]
 8002fc4:	e7eb      	b.n	8002f9e <__swsetup_r+0x1e>
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <__swsetup_r+0xd8>)
 8002fc8:	429c      	cmp	r4, r3
 8002fca:	bf08      	it	eq
 8002fcc:	68ec      	ldreq	r4, [r5, #12]
 8002fce:	e7e6      	b.n	8002f9e <__swsetup_r+0x1e>
 8002fd0:	0751      	lsls	r1, r2, #29
 8002fd2:	d512      	bpl.n	8002ffa <__swsetup_r+0x7a>
 8002fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fd6:	b141      	cbz	r1, 8002fea <__swsetup_r+0x6a>
 8002fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fdc:	4299      	cmp	r1, r3
 8002fde:	d002      	beq.n	8002fe6 <__swsetup_r+0x66>
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	f7ff fb41 	bl	8002668 <_free_r>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	6363      	str	r3, [r4, #52]	; 0x34
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ff0:	81a3      	strh	r3, [r4, #12]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6063      	str	r3, [r4, #4]
 8002ff6:	6923      	ldr	r3, [r4, #16]
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	89a3      	ldrh	r3, [r4, #12]
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	81a3      	strh	r3, [r4, #12]
 8003002:	6923      	ldr	r3, [r4, #16]
 8003004:	b94b      	cbnz	r3, 800301a <__swsetup_r+0x9a>
 8003006:	89a3      	ldrh	r3, [r4, #12]
 8003008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800300c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003010:	d003      	beq.n	800301a <__swsetup_r+0x9a>
 8003012:	4621      	mov	r1, r4
 8003014:	4630      	mov	r0, r6
 8003016:	f000 f9bf 	bl	8003398 <__smakebuf_r>
 800301a:	89a2      	ldrh	r2, [r4, #12]
 800301c:	f012 0301 	ands.w	r3, r2, #1
 8003020:	d00c      	beq.n	800303c <__swsetup_r+0xbc>
 8003022:	2300      	movs	r3, #0
 8003024:	60a3      	str	r3, [r4, #8]
 8003026:	6963      	ldr	r3, [r4, #20]
 8003028:	425b      	negs	r3, r3
 800302a:	61a3      	str	r3, [r4, #24]
 800302c:	6923      	ldr	r3, [r4, #16]
 800302e:	b953      	cbnz	r3, 8003046 <__swsetup_r+0xc6>
 8003030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003034:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003038:	d1ba      	bne.n	8002fb0 <__swsetup_r+0x30>
 800303a:	bd70      	pop	{r4, r5, r6, pc}
 800303c:	0792      	lsls	r2, r2, #30
 800303e:	bf58      	it	pl
 8003040:	6963      	ldrpl	r3, [r4, #20]
 8003042:	60a3      	str	r3, [r4, #8]
 8003044:	e7f2      	b.n	800302c <__swsetup_r+0xac>
 8003046:	2000      	movs	r0, #0
 8003048:	e7f7      	b.n	800303a <__swsetup_r+0xba>
 800304a:	bf00      	nop
 800304c:	2000000c 	.word	0x2000000c
 8003050:	08003a64 	.word	0x08003a64
 8003054:	08003a84 	.word	0x08003a84
 8003058:	08003a44 	.word	0x08003a44

0800305c <__sflush_r>:
 800305c:	898a      	ldrh	r2, [r1, #12]
 800305e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003062:	4605      	mov	r5, r0
 8003064:	0710      	lsls	r0, r2, #28
 8003066:	460c      	mov	r4, r1
 8003068:	d458      	bmi.n	800311c <__sflush_r+0xc0>
 800306a:	684b      	ldr	r3, [r1, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	dc05      	bgt.n	800307c <__sflush_r+0x20>
 8003070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	dc02      	bgt.n	800307c <__sflush_r+0x20>
 8003076:	2000      	movs	r0, #0
 8003078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800307c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800307e:	2e00      	cmp	r6, #0
 8003080:	d0f9      	beq.n	8003076 <__sflush_r+0x1a>
 8003082:	2300      	movs	r3, #0
 8003084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003088:	682f      	ldr	r7, [r5, #0]
 800308a:	6a21      	ldr	r1, [r4, #32]
 800308c:	602b      	str	r3, [r5, #0]
 800308e:	d032      	beq.n	80030f6 <__sflush_r+0x9a>
 8003090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003092:	89a3      	ldrh	r3, [r4, #12]
 8003094:	075a      	lsls	r2, r3, #29
 8003096:	d505      	bpl.n	80030a4 <__sflush_r+0x48>
 8003098:	6863      	ldr	r3, [r4, #4]
 800309a:	1ac0      	subs	r0, r0, r3
 800309c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800309e:	b10b      	cbz	r3, 80030a4 <__sflush_r+0x48>
 80030a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030a2:	1ac0      	subs	r0, r0, r3
 80030a4:	2300      	movs	r3, #0
 80030a6:	4602      	mov	r2, r0
 80030a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030aa:	6a21      	ldr	r1, [r4, #32]
 80030ac:	4628      	mov	r0, r5
 80030ae:	47b0      	blx	r6
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	d106      	bne.n	80030c4 <__sflush_r+0x68>
 80030b6:	6829      	ldr	r1, [r5, #0]
 80030b8:	291d      	cmp	r1, #29
 80030ba:	d848      	bhi.n	800314e <__sflush_r+0xf2>
 80030bc:	4a29      	ldr	r2, [pc, #164]	; (8003164 <__sflush_r+0x108>)
 80030be:	40ca      	lsrs	r2, r1
 80030c0:	07d6      	lsls	r6, r2, #31
 80030c2:	d544      	bpl.n	800314e <__sflush_r+0xf2>
 80030c4:	2200      	movs	r2, #0
 80030c6:	6062      	str	r2, [r4, #4]
 80030c8:	6922      	ldr	r2, [r4, #16]
 80030ca:	04d9      	lsls	r1, r3, #19
 80030cc:	6022      	str	r2, [r4, #0]
 80030ce:	d504      	bpl.n	80030da <__sflush_r+0x7e>
 80030d0:	1c42      	adds	r2, r0, #1
 80030d2:	d101      	bne.n	80030d8 <__sflush_r+0x7c>
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	b903      	cbnz	r3, 80030da <__sflush_r+0x7e>
 80030d8:	6560      	str	r0, [r4, #84]	; 0x54
 80030da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030dc:	602f      	str	r7, [r5, #0]
 80030de:	2900      	cmp	r1, #0
 80030e0:	d0c9      	beq.n	8003076 <__sflush_r+0x1a>
 80030e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030e6:	4299      	cmp	r1, r3
 80030e8:	d002      	beq.n	80030f0 <__sflush_r+0x94>
 80030ea:	4628      	mov	r0, r5
 80030ec:	f7ff fabc 	bl	8002668 <_free_r>
 80030f0:	2000      	movs	r0, #0
 80030f2:	6360      	str	r0, [r4, #52]	; 0x34
 80030f4:	e7c0      	b.n	8003078 <__sflush_r+0x1c>
 80030f6:	2301      	movs	r3, #1
 80030f8:	4628      	mov	r0, r5
 80030fa:	47b0      	blx	r6
 80030fc:	1c41      	adds	r1, r0, #1
 80030fe:	d1c8      	bne.n	8003092 <__sflush_r+0x36>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0c5      	beq.n	8003092 <__sflush_r+0x36>
 8003106:	2b1d      	cmp	r3, #29
 8003108:	d001      	beq.n	800310e <__sflush_r+0xb2>
 800310a:	2b16      	cmp	r3, #22
 800310c:	d101      	bne.n	8003112 <__sflush_r+0xb6>
 800310e:	602f      	str	r7, [r5, #0]
 8003110:	e7b1      	b.n	8003076 <__sflush_r+0x1a>
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003118:	81a3      	strh	r3, [r4, #12]
 800311a:	e7ad      	b.n	8003078 <__sflush_r+0x1c>
 800311c:	690f      	ldr	r7, [r1, #16]
 800311e:	2f00      	cmp	r7, #0
 8003120:	d0a9      	beq.n	8003076 <__sflush_r+0x1a>
 8003122:	0793      	lsls	r3, r2, #30
 8003124:	bf18      	it	ne
 8003126:	2300      	movne	r3, #0
 8003128:	680e      	ldr	r6, [r1, #0]
 800312a:	bf08      	it	eq
 800312c:	694b      	ldreq	r3, [r1, #20]
 800312e:	eba6 0807 	sub.w	r8, r6, r7
 8003132:	600f      	str	r7, [r1, #0]
 8003134:	608b      	str	r3, [r1, #8]
 8003136:	f1b8 0f00 	cmp.w	r8, #0
 800313a:	dd9c      	ble.n	8003076 <__sflush_r+0x1a>
 800313c:	4643      	mov	r3, r8
 800313e:	463a      	mov	r2, r7
 8003140:	6a21      	ldr	r1, [r4, #32]
 8003142:	4628      	mov	r0, r5
 8003144:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003146:	47b0      	blx	r6
 8003148:	2800      	cmp	r0, #0
 800314a:	dc06      	bgt.n	800315a <__sflush_r+0xfe>
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003152:	81a3      	strh	r3, [r4, #12]
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	e78e      	b.n	8003078 <__sflush_r+0x1c>
 800315a:	4407      	add	r7, r0
 800315c:	eba8 0800 	sub.w	r8, r8, r0
 8003160:	e7e9      	b.n	8003136 <__sflush_r+0xda>
 8003162:	bf00      	nop
 8003164:	20400001 	.word	0x20400001

08003168 <_fflush_r>:
 8003168:	b538      	push	{r3, r4, r5, lr}
 800316a:	690b      	ldr	r3, [r1, #16]
 800316c:	4605      	mov	r5, r0
 800316e:	460c      	mov	r4, r1
 8003170:	b1db      	cbz	r3, 80031aa <_fflush_r+0x42>
 8003172:	b118      	cbz	r0, 800317c <_fflush_r+0x14>
 8003174:	6983      	ldr	r3, [r0, #24]
 8003176:	b90b      	cbnz	r3, 800317c <_fflush_r+0x14>
 8003178:	f000 f860 	bl	800323c <__sinit>
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <_fflush_r+0x48>)
 800317e:	429c      	cmp	r4, r3
 8003180:	d109      	bne.n	8003196 <_fflush_r+0x2e>
 8003182:	686c      	ldr	r4, [r5, #4]
 8003184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003188:	b17b      	cbz	r3, 80031aa <_fflush_r+0x42>
 800318a:	4621      	mov	r1, r4
 800318c:	4628      	mov	r0, r5
 800318e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003192:	f7ff bf63 	b.w	800305c <__sflush_r>
 8003196:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <_fflush_r+0x4c>)
 8003198:	429c      	cmp	r4, r3
 800319a:	d101      	bne.n	80031a0 <_fflush_r+0x38>
 800319c:	68ac      	ldr	r4, [r5, #8]
 800319e:	e7f1      	b.n	8003184 <_fflush_r+0x1c>
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <_fflush_r+0x50>)
 80031a2:	429c      	cmp	r4, r3
 80031a4:	bf08      	it	eq
 80031a6:	68ec      	ldreq	r4, [r5, #12]
 80031a8:	e7ec      	b.n	8003184 <_fflush_r+0x1c>
 80031aa:	2000      	movs	r0, #0
 80031ac:	bd38      	pop	{r3, r4, r5, pc}
 80031ae:	bf00      	nop
 80031b0:	08003a64 	.word	0x08003a64
 80031b4:	08003a84 	.word	0x08003a84
 80031b8:	08003a44 	.word	0x08003a44

080031bc <std>:
 80031bc:	2300      	movs	r3, #0
 80031be:	b510      	push	{r4, lr}
 80031c0:	4604      	mov	r4, r0
 80031c2:	e9c0 3300 	strd	r3, r3, [r0]
 80031c6:	6083      	str	r3, [r0, #8]
 80031c8:	8181      	strh	r1, [r0, #12]
 80031ca:	6643      	str	r3, [r0, #100]	; 0x64
 80031cc:	81c2      	strh	r2, [r0, #14]
 80031ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031d2:	6183      	str	r3, [r0, #24]
 80031d4:	4619      	mov	r1, r3
 80031d6:	2208      	movs	r2, #8
 80031d8:	305c      	adds	r0, #92	; 0x5c
 80031da:	f7ff fa3d 	bl	8002658 <memset>
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <std+0x38>)
 80031e0:	6224      	str	r4, [r4, #32]
 80031e2:	6263      	str	r3, [r4, #36]	; 0x24
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <std+0x3c>)
 80031e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <std+0x40>)
 80031ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <std+0x44>)
 80031ee:	6323      	str	r3, [r4, #48]	; 0x30
 80031f0:	bd10      	pop	{r4, pc}
 80031f2:	bf00      	nop
 80031f4:	08003771 	.word	0x08003771
 80031f8:	08003793 	.word	0x08003793
 80031fc:	080037cb 	.word	0x080037cb
 8003200:	080037ef 	.word	0x080037ef

08003204 <_cleanup_r>:
 8003204:	4901      	ldr	r1, [pc, #4]	; (800320c <_cleanup_r+0x8>)
 8003206:	f000 b885 	b.w	8003314 <_fwalk_reent>
 800320a:	bf00      	nop
 800320c:	08003169 	.word	0x08003169

08003210 <__sfmoreglue>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	2568      	movs	r5, #104	; 0x68
 8003214:	1e4a      	subs	r2, r1, #1
 8003216:	4355      	muls	r5, r2
 8003218:	460e      	mov	r6, r1
 800321a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800321e:	f7ff fa6f 	bl	8002700 <_malloc_r>
 8003222:	4604      	mov	r4, r0
 8003224:	b140      	cbz	r0, 8003238 <__sfmoreglue+0x28>
 8003226:	2100      	movs	r1, #0
 8003228:	e9c0 1600 	strd	r1, r6, [r0]
 800322c:	300c      	adds	r0, #12
 800322e:	60a0      	str	r0, [r4, #8]
 8003230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003234:	f7ff fa10 	bl	8002658 <memset>
 8003238:	4620      	mov	r0, r4
 800323a:	bd70      	pop	{r4, r5, r6, pc}

0800323c <__sinit>:
 800323c:	6983      	ldr	r3, [r0, #24]
 800323e:	b510      	push	{r4, lr}
 8003240:	4604      	mov	r4, r0
 8003242:	bb33      	cbnz	r3, 8003292 <__sinit+0x56>
 8003244:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003248:	6503      	str	r3, [r0, #80]	; 0x50
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <__sinit+0x58>)
 800324c:	4a12      	ldr	r2, [pc, #72]	; (8003298 <__sinit+0x5c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6282      	str	r2, [r0, #40]	; 0x28
 8003252:	4298      	cmp	r0, r3
 8003254:	bf04      	itt	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	6183      	streq	r3, [r0, #24]
 800325a:	f000 f81f 	bl	800329c <__sfp>
 800325e:	6060      	str	r0, [r4, #4]
 8003260:	4620      	mov	r0, r4
 8003262:	f000 f81b 	bl	800329c <__sfp>
 8003266:	60a0      	str	r0, [r4, #8]
 8003268:	4620      	mov	r0, r4
 800326a:	f000 f817 	bl	800329c <__sfp>
 800326e:	2200      	movs	r2, #0
 8003270:	60e0      	str	r0, [r4, #12]
 8003272:	2104      	movs	r1, #4
 8003274:	6860      	ldr	r0, [r4, #4]
 8003276:	f7ff ffa1 	bl	80031bc <std>
 800327a:	2201      	movs	r2, #1
 800327c:	2109      	movs	r1, #9
 800327e:	68a0      	ldr	r0, [r4, #8]
 8003280:	f7ff ff9c 	bl	80031bc <std>
 8003284:	2202      	movs	r2, #2
 8003286:	2112      	movs	r1, #18
 8003288:	68e0      	ldr	r0, [r4, #12]
 800328a:	f7ff ff97 	bl	80031bc <std>
 800328e:	2301      	movs	r3, #1
 8003290:	61a3      	str	r3, [r4, #24]
 8003292:	bd10      	pop	{r4, pc}
 8003294:	08003a0c 	.word	0x08003a0c
 8003298:	08003205 	.word	0x08003205

0800329c <__sfp>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <__sfp+0x70>)
 80032a0:	4607      	mov	r7, r0
 80032a2:	681e      	ldr	r6, [r3, #0]
 80032a4:	69b3      	ldr	r3, [r6, #24]
 80032a6:	b913      	cbnz	r3, 80032ae <__sfp+0x12>
 80032a8:	4630      	mov	r0, r6
 80032aa:	f7ff ffc7 	bl	800323c <__sinit>
 80032ae:	3648      	adds	r6, #72	; 0x48
 80032b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	d503      	bpl.n	80032c0 <__sfp+0x24>
 80032b8:	6833      	ldr	r3, [r6, #0]
 80032ba:	b133      	cbz	r3, 80032ca <__sfp+0x2e>
 80032bc:	6836      	ldr	r6, [r6, #0]
 80032be:	e7f7      	b.n	80032b0 <__sfp+0x14>
 80032c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032c4:	b16d      	cbz	r5, 80032e2 <__sfp+0x46>
 80032c6:	3468      	adds	r4, #104	; 0x68
 80032c8:	e7f4      	b.n	80032b4 <__sfp+0x18>
 80032ca:	2104      	movs	r1, #4
 80032cc:	4638      	mov	r0, r7
 80032ce:	f7ff ff9f 	bl	8003210 <__sfmoreglue>
 80032d2:	6030      	str	r0, [r6, #0]
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d1f1      	bne.n	80032bc <__sfp+0x20>
 80032d8:	230c      	movs	r3, #12
 80032da:	4604      	mov	r4, r0
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	4620      	mov	r0, r4
 80032e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <__sfp+0x74>)
 80032e4:	6665      	str	r5, [r4, #100]	; 0x64
 80032e6:	e9c4 5500 	strd	r5, r5, [r4]
 80032ea:	60a5      	str	r5, [r4, #8]
 80032ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80032f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80032f4:	2208      	movs	r2, #8
 80032f6:	4629      	mov	r1, r5
 80032f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032fc:	f7ff f9ac 	bl	8002658 <memset>
 8003300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003308:	e7e9      	b.n	80032de <__sfp+0x42>
 800330a:	bf00      	nop
 800330c:	08003a0c 	.word	0x08003a0c
 8003310:	ffff0001 	.word	0xffff0001

08003314 <_fwalk_reent>:
 8003314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003318:	4680      	mov	r8, r0
 800331a:	4689      	mov	r9, r1
 800331c:	2600      	movs	r6, #0
 800331e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003322:	b914      	cbnz	r4, 800332a <_fwalk_reent+0x16>
 8003324:	4630      	mov	r0, r6
 8003326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800332a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800332e:	3f01      	subs	r7, #1
 8003330:	d501      	bpl.n	8003336 <_fwalk_reent+0x22>
 8003332:	6824      	ldr	r4, [r4, #0]
 8003334:	e7f5      	b.n	8003322 <_fwalk_reent+0xe>
 8003336:	89ab      	ldrh	r3, [r5, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d907      	bls.n	800334c <_fwalk_reent+0x38>
 800333c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003340:	3301      	adds	r3, #1
 8003342:	d003      	beq.n	800334c <_fwalk_reent+0x38>
 8003344:	4629      	mov	r1, r5
 8003346:	4640      	mov	r0, r8
 8003348:	47c8      	blx	r9
 800334a:	4306      	orrs	r6, r0
 800334c:	3568      	adds	r5, #104	; 0x68
 800334e:	e7ee      	b.n	800332e <_fwalk_reent+0x1a>

08003350 <__swhatbuf_r>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	460e      	mov	r6, r1
 8003354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003358:	b096      	sub	sp, #88	; 0x58
 800335a:	2900      	cmp	r1, #0
 800335c:	4614      	mov	r4, r2
 800335e:	461d      	mov	r5, r3
 8003360:	da07      	bge.n	8003372 <__swhatbuf_r+0x22>
 8003362:	2300      	movs	r3, #0
 8003364:	602b      	str	r3, [r5, #0]
 8003366:	89b3      	ldrh	r3, [r6, #12]
 8003368:	061a      	lsls	r2, r3, #24
 800336a:	d410      	bmi.n	800338e <__swhatbuf_r+0x3e>
 800336c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003370:	e00e      	b.n	8003390 <__swhatbuf_r+0x40>
 8003372:	466a      	mov	r2, sp
 8003374:	f000 fa62 	bl	800383c <_fstat_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	dbf2      	blt.n	8003362 <__swhatbuf_r+0x12>
 800337c:	9a01      	ldr	r2, [sp, #4]
 800337e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003382:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003386:	425a      	negs	r2, r3
 8003388:	415a      	adcs	r2, r3
 800338a:	602a      	str	r2, [r5, #0]
 800338c:	e7ee      	b.n	800336c <__swhatbuf_r+0x1c>
 800338e:	2340      	movs	r3, #64	; 0x40
 8003390:	2000      	movs	r0, #0
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	b016      	add	sp, #88	; 0x58
 8003396:	bd70      	pop	{r4, r5, r6, pc}

08003398 <__smakebuf_r>:
 8003398:	898b      	ldrh	r3, [r1, #12]
 800339a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800339c:	079d      	lsls	r5, r3, #30
 800339e:	4606      	mov	r6, r0
 80033a0:	460c      	mov	r4, r1
 80033a2:	d507      	bpl.n	80033b4 <__smakebuf_r+0x1c>
 80033a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	6123      	str	r3, [r4, #16]
 80033ac:	2301      	movs	r3, #1
 80033ae:	6163      	str	r3, [r4, #20]
 80033b0:	b002      	add	sp, #8
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	ab01      	add	r3, sp, #4
 80033b6:	466a      	mov	r2, sp
 80033b8:	f7ff ffca 	bl	8003350 <__swhatbuf_r>
 80033bc:	9900      	ldr	r1, [sp, #0]
 80033be:	4605      	mov	r5, r0
 80033c0:	4630      	mov	r0, r6
 80033c2:	f7ff f99d 	bl	8002700 <_malloc_r>
 80033c6:	b948      	cbnz	r0, 80033dc <__smakebuf_r+0x44>
 80033c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033cc:	059a      	lsls	r2, r3, #22
 80033ce:	d4ef      	bmi.n	80033b0 <__smakebuf_r+0x18>
 80033d0:	f023 0303 	bic.w	r3, r3, #3
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	81a3      	strh	r3, [r4, #12]
 80033da:	e7e3      	b.n	80033a4 <__smakebuf_r+0xc>
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <__smakebuf_r+0x7c>)
 80033de:	62b3      	str	r3, [r6, #40]	; 0x28
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	6020      	str	r0, [r4, #0]
 80033e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	9b00      	ldr	r3, [sp, #0]
 80033ec:	6120      	str	r0, [r4, #16]
 80033ee:	6163      	str	r3, [r4, #20]
 80033f0:	9b01      	ldr	r3, [sp, #4]
 80033f2:	b15b      	cbz	r3, 800340c <__smakebuf_r+0x74>
 80033f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033f8:	4630      	mov	r0, r6
 80033fa:	f000 fa31 	bl	8003860 <_isatty_r>
 80033fe:	b128      	cbz	r0, 800340c <__smakebuf_r+0x74>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	89a3      	ldrh	r3, [r4, #12]
 800340e:	431d      	orrs	r5, r3
 8003410:	81a5      	strh	r5, [r4, #12]
 8003412:	e7cd      	b.n	80033b0 <__smakebuf_r+0x18>
 8003414:	08003205 	.word	0x08003205

08003418 <memchr>:
 8003418:	b510      	push	{r4, lr}
 800341a:	b2c9      	uxtb	r1, r1
 800341c:	4402      	add	r2, r0
 800341e:	4290      	cmp	r0, r2
 8003420:	4603      	mov	r3, r0
 8003422:	d101      	bne.n	8003428 <memchr+0x10>
 8003424:	2300      	movs	r3, #0
 8003426:	e003      	b.n	8003430 <memchr+0x18>
 8003428:	781c      	ldrb	r4, [r3, #0]
 800342a:	3001      	adds	r0, #1
 800342c:	428c      	cmp	r4, r1
 800342e:	d1f6      	bne.n	800341e <memchr+0x6>
 8003430:	4618      	mov	r0, r3
 8003432:	bd10      	pop	{r4, pc}

08003434 <memcpy>:
 8003434:	b510      	push	{r4, lr}
 8003436:	1e43      	subs	r3, r0, #1
 8003438:	440a      	add	r2, r1
 800343a:	4291      	cmp	r1, r2
 800343c:	d100      	bne.n	8003440 <memcpy+0xc>
 800343e:	bd10      	pop	{r4, pc}
 8003440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003448:	e7f7      	b.n	800343a <memcpy+0x6>

0800344a <memmove>:
 800344a:	4288      	cmp	r0, r1
 800344c:	b510      	push	{r4, lr}
 800344e:	eb01 0302 	add.w	r3, r1, r2
 8003452:	d807      	bhi.n	8003464 <memmove+0x1a>
 8003454:	1e42      	subs	r2, r0, #1
 8003456:	4299      	cmp	r1, r3
 8003458:	d00a      	beq.n	8003470 <memmove+0x26>
 800345a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800345e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003462:	e7f8      	b.n	8003456 <memmove+0xc>
 8003464:	4283      	cmp	r3, r0
 8003466:	d9f5      	bls.n	8003454 <memmove+0xa>
 8003468:	1881      	adds	r1, r0, r2
 800346a:	1ad2      	subs	r2, r2, r3
 800346c:	42d3      	cmn	r3, r2
 800346e:	d100      	bne.n	8003472 <memmove+0x28>
 8003470:	bd10      	pop	{r4, pc}
 8003472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003476:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800347a:	e7f7      	b.n	800346c <memmove+0x22>

0800347c <__malloc_lock>:
 800347c:	4770      	bx	lr

0800347e <__malloc_unlock>:
 800347e:	4770      	bx	lr

08003480 <_realloc_r>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	4607      	mov	r7, r0
 8003484:	4614      	mov	r4, r2
 8003486:	460e      	mov	r6, r1
 8003488:	b921      	cbnz	r1, 8003494 <_realloc_r+0x14>
 800348a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800348e:	4611      	mov	r1, r2
 8003490:	f7ff b936 	b.w	8002700 <_malloc_r>
 8003494:	b922      	cbnz	r2, 80034a0 <_realloc_r+0x20>
 8003496:	f7ff f8e7 	bl	8002668 <_free_r>
 800349a:	4625      	mov	r5, r4
 800349c:	4628      	mov	r0, r5
 800349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a0:	f000 fa00 	bl	80038a4 <_malloc_usable_size_r>
 80034a4:	42a0      	cmp	r0, r4
 80034a6:	d20f      	bcs.n	80034c8 <_realloc_r+0x48>
 80034a8:	4621      	mov	r1, r4
 80034aa:	4638      	mov	r0, r7
 80034ac:	f7ff f928 	bl	8002700 <_malloc_r>
 80034b0:	4605      	mov	r5, r0
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d0f2      	beq.n	800349c <_realloc_r+0x1c>
 80034b6:	4631      	mov	r1, r6
 80034b8:	4622      	mov	r2, r4
 80034ba:	f7ff ffbb 	bl	8003434 <memcpy>
 80034be:	4631      	mov	r1, r6
 80034c0:	4638      	mov	r0, r7
 80034c2:	f7ff f8d1 	bl	8002668 <_free_r>
 80034c6:	e7e9      	b.n	800349c <_realloc_r+0x1c>
 80034c8:	4635      	mov	r5, r6
 80034ca:	e7e7      	b.n	800349c <_realloc_r+0x1c>

080034cc <__ssputs_r>:
 80034cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	688e      	ldr	r6, [r1, #8]
 80034d2:	4682      	mov	sl, r0
 80034d4:	429e      	cmp	r6, r3
 80034d6:	460c      	mov	r4, r1
 80034d8:	4690      	mov	r8, r2
 80034da:	4699      	mov	r9, r3
 80034dc:	d837      	bhi.n	800354e <__ssputs_r+0x82>
 80034de:	898a      	ldrh	r2, [r1, #12]
 80034e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034e4:	d031      	beq.n	800354a <__ssputs_r+0x7e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	6825      	ldr	r5, [r4, #0]
 80034ea:	6909      	ldr	r1, [r1, #16]
 80034ec:	1a6f      	subs	r7, r5, r1
 80034ee:	6965      	ldr	r5, [r4, #20]
 80034f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80034f8:	f109 0301 	add.w	r3, r9, #1
 80034fc:	443b      	add	r3, r7
 80034fe:	429d      	cmp	r5, r3
 8003500:	bf38      	it	cc
 8003502:	461d      	movcc	r5, r3
 8003504:	0553      	lsls	r3, r2, #21
 8003506:	d530      	bpl.n	800356a <__ssputs_r+0x9e>
 8003508:	4629      	mov	r1, r5
 800350a:	f7ff f8f9 	bl	8002700 <_malloc_r>
 800350e:	4606      	mov	r6, r0
 8003510:	b950      	cbnz	r0, 8003528 <__ssputs_r+0x5c>
 8003512:	230c      	movs	r3, #12
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f8ca 3000 	str.w	r3, [sl]
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003522:	81a3      	strh	r3, [r4, #12]
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	463a      	mov	r2, r7
 800352a:	6921      	ldr	r1, [r4, #16]
 800352c:	f7ff ff82 	bl	8003434 <memcpy>
 8003530:	89a3      	ldrh	r3, [r4, #12]
 8003532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353a:	81a3      	strh	r3, [r4, #12]
 800353c:	6126      	str	r6, [r4, #16]
 800353e:	443e      	add	r6, r7
 8003540:	6026      	str	r6, [r4, #0]
 8003542:	464e      	mov	r6, r9
 8003544:	6165      	str	r5, [r4, #20]
 8003546:	1bed      	subs	r5, r5, r7
 8003548:	60a5      	str	r5, [r4, #8]
 800354a:	454e      	cmp	r6, r9
 800354c:	d900      	bls.n	8003550 <__ssputs_r+0x84>
 800354e:	464e      	mov	r6, r9
 8003550:	4632      	mov	r2, r6
 8003552:	4641      	mov	r1, r8
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	f7ff ff78 	bl	800344a <memmove>
 800355a:	68a3      	ldr	r3, [r4, #8]
 800355c:	2000      	movs	r0, #0
 800355e:	1b9b      	subs	r3, r3, r6
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	441e      	add	r6, r3
 8003566:	6026      	str	r6, [r4, #0]
 8003568:	e7dc      	b.n	8003524 <__ssputs_r+0x58>
 800356a:	462a      	mov	r2, r5
 800356c:	f7ff ff88 	bl	8003480 <_realloc_r>
 8003570:	4606      	mov	r6, r0
 8003572:	2800      	cmp	r0, #0
 8003574:	d1e2      	bne.n	800353c <__ssputs_r+0x70>
 8003576:	6921      	ldr	r1, [r4, #16]
 8003578:	4650      	mov	r0, sl
 800357a:	f7ff f875 	bl	8002668 <_free_r>
 800357e:	e7c8      	b.n	8003512 <__ssputs_r+0x46>

08003580 <_svfiprintf_r>:
 8003580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003584:	461d      	mov	r5, r3
 8003586:	898b      	ldrh	r3, [r1, #12]
 8003588:	b09d      	sub	sp, #116	; 0x74
 800358a:	061f      	lsls	r7, r3, #24
 800358c:	4680      	mov	r8, r0
 800358e:	460c      	mov	r4, r1
 8003590:	4616      	mov	r6, r2
 8003592:	d50f      	bpl.n	80035b4 <_svfiprintf_r+0x34>
 8003594:	690b      	ldr	r3, [r1, #16]
 8003596:	b96b      	cbnz	r3, 80035b4 <_svfiprintf_r+0x34>
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	f7ff f8b1 	bl	8002700 <_malloc_r>
 800359e:	6020      	str	r0, [r4, #0]
 80035a0:	6120      	str	r0, [r4, #16]
 80035a2:	b928      	cbnz	r0, 80035b0 <_svfiprintf_r+0x30>
 80035a4:	230c      	movs	r3, #12
 80035a6:	f8c8 3000 	str.w	r3, [r8]
 80035aa:	f04f 30ff 	mov.w	r0, #4294967295
 80035ae:	e0c8      	b.n	8003742 <_svfiprintf_r+0x1c2>
 80035b0:	2340      	movs	r3, #64	; 0x40
 80035b2:	6163      	str	r3, [r4, #20]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9309      	str	r3, [sp, #36]	; 0x24
 80035b8:	2320      	movs	r3, #32
 80035ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035be:	2330      	movs	r3, #48	; 0x30
 80035c0:	f04f 0b01 	mov.w	fp, #1
 80035c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035c8:	9503      	str	r5, [sp, #12]
 80035ca:	4637      	mov	r7, r6
 80035cc:	463d      	mov	r5, r7
 80035ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035d2:	b10b      	cbz	r3, 80035d8 <_svfiprintf_r+0x58>
 80035d4:	2b25      	cmp	r3, #37	; 0x25
 80035d6:	d13e      	bne.n	8003656 <_svfiprintf_r+0xd6>
 80035d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80035dc:	d00b      	beq.n	80035f6 <_svfiprintf_r+0x76>
 80035de:	4653      	mov	r3, sl
 80035e0:	4632      	mov	r2, r6
 80035e2:	4621      	mov	r1, r4
 80035e4:	4640      	mov	r0, r8
 80035e6:	f7ff ff71 	bl	80034cc <__ssputs_r>
 80035ea:	3001      	adds	r0, #1
 80035ec:	f000 80a4 	beq.w	8003738 <_svfiprintf_r+0x1b8>
 80035f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f2:	4453      	add	r3, sl
 80035f4:	9309      	str	r3, [sp, #36]	; 0x24
 80035f6:	783b      	ldrb	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 809d 	beq.w	8003738 <_svfiprintf_r+0x1b8>
 80035fe:	2300      	movs	r3, #0
 8003600:	f04f 32ff 	mov.w	r2, #4294967295
 8003604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003608:	9304      	str	r3, [sp, #16]
 800360a:	9307      	str	r3, [sp, #28]
 800360c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003610:	931a      	str	r3, [sp, #104]	; 0x68
 8003612:	462f      	mov	r7, r5
 8003614:	2205      	movs	r2, #5
 8003616:	f817 1b01 	ldrb.w	r1, [r7], #1
 800361a:	4850      	ldr	r0, [pc, #320]	; (800375c <_svfiprintf_r+0x1dc>)
 800361c:	f7ff fefc 	bl	8003418 <memchr>
 8003620:	9b04      	ldr	r3, [sp, #16]
 8003622:	b9d0      	cbnz	r0, 800365a <_svfiprintf_r+0xda>
 8003624:	06d9      	lsls	r1, r3, #27
 8003626:	bf44      	itt	mi
 8003628:	2220      	movmi	r2, #32
 800362a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800362e:	071a      	lsls	r2, r3, #28
 8003630:	bf44      	itt	mi
 8003632:	222b      	movmi	r2, #43	; 0x2b
 8003634:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003638:	782a      	ldrb	r2, [r5, #0]
 800363a:	2a2a      	cmp	r2, #42	; 0x2a
 800363c:	d015      	beq.n	800366a <_svfiprintf_r+0xea>
 800363e:	462f      	mov	r7, r5
 8003640:	2000      	movs	r0, #0
 8003642:	250a      	movs	r5, #10
 8003644:	9a07      	ldr	r2, [sp, #28]
 8003646:	4639      	mov	r1, r7
 8003648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800364c:	3b30      	subs	r3, #48	; 0x30
 800364e:	2b09      	cmp	r3, #9
 8003650:	d94d      	bls.n	80036ee <_svfiprintf_r+0x16e>
 8003652:	b1b8      	cbz	r0, 8003684 <_svfiprintf_r+0x104>
 8003654:	e00f      	b.n	8003676 <_svfiprintf_r+0xf6>
 8003656:	462f      	mov	r7, r5
 8003658:	e7b8      	b.n	80035cc <_svfiprintf_r+0x4c>
 800365a:	4a40      	ldr	r2, [pc, #256]	; (800375c <_svfiprintf_r+0x1dc>)
 800365c:	463d      	mov	r5, r7
 800365e:	1a80      	subs	r0, r0, r2
 8003660:	fa0b f000 	lsl.w	r0, fp, r0
 8003664:	4318      	orrs	r0, r3
 8003666:	9004      	str	r0, [sp, #16]
 8003668:	e7d3      	b.n	8003612 <_svfiprintf_r+0x92>
 800366a:	9a03      	ldr	r2, [sp, #12]
 800366c:	1d11      	adds	r1, r2, #4
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	9103      	str	r1, [sp, #12]
 8003672:	2a00      	cmp	r2, #0
 8003674:	db01      	blt.n	800367a <_svfiprintf_r+0xfa>
 8003676:	9207      	str	r2, [sp, #28]
 8003678:	e004      	b.n	8003684 <_svfiprintf_r+0x104>
 800367a:	4252      	negs	r2, r2
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	9207      	str	r2, [sp, #28]
 8003682:	9304      	str	r3, [sp, #16]
 8003684:	783b      	ldrb	r3, [r7, #0]
 8003686:	2b2e      	cmp	r3, #46	; 0x2e
 8003688:	d10c      	bne.n	80036a4 <_svfiprintf_r+0x124>
 800368a:	787b      	ldrb	r3, [r7, #1]
 800368c:	2b2a      	cmp	r3, #42	; 0x2a
 800368e:	d133      	bne.n	80036f8 <_svfiprintf_r+0x178>
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	3702      	adds	r7, #2
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	9203      	str	r2, [sp, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	bfb8      	it	lt
 800369e:	f04f 33ff 	movlt.w	r3, #4294967295
 80036a2:	9305      	str	r3, [sp, #20]
 80036a4:	4d2e      	ldr	r5, [pc, #184]	; (8003760 <_svfiprintf_r+0x1e0>)
 80036a6:	2203      	movs	r2, #3
 80036a8:	7839      	ldrb	r1, [r7, #0]
 80036aa:	4628      	mov	r0, r5
 80036ac:	f7ff feb4 	bl	8003418 <memchr>
 80036b0:	b138      	cbz	r0, 80036c2 <_svfiprintf_r+0x142>
 80036b2:	2340      	movs	r3, #64	; 0x40
 80036b4:	1b40      	subs	r0, r0, r5
 80036b6:	fa03 f000 	lsl.w	r0, r3, r0
 80036ba:	9b04      	ldr	r3, [sp, #16]
 80036bc:	3701      	adds	r7, #1
 80036be:	4303      	orrs	r3, r0
 80036c0:	9304      	str	r3, [sp, #16]
 80036c2:	7839      	ldrb	r1, [r7, #0]
 80036c4:	2206      	movs	r2, #6
 80036c6:	4827      	ldr	r0, [pc, #156]	; (8003764 <_svfiprintf_r+0x1e4>)
 80036c8:	1c7e      	adds	r6, r7, #1
 80036ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036ce:	f7ff fea3 	bl	8003418 <memchr>
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d038      	beq.n	8003748 <_svfiprintf_r+0x1c8>
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <_svfiprintf_r+0x1e8>)
 80036d8:	bb13      	cbnz	r3, 8003720 <_svfiprintf_r+0x1a0>
 80036da:	9b03      	ldr	r3, [sp, #12]
 80036dc:	3307      	adds	r3, #7
 80036de:	f023 0307 	bic.w	r3, r3, #7
 80036e2:	3308      	adds	r3, #8
 80036e4:	9303      	str	r3, [sp, #12]
 80036e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e8:	444b      	add	r3, r9
 80036ea:	9309      	str	r3, [sp, #36]	; 0x24
 80036ec:	e76d      	b.n	80035ca <_svfiprintf_r+0x4a>
 80036ee:	fb05 3202 	mla	r2, r5, r2, r3
 80036f2:	2001      	movs	r0, #1
 80036f4:	460f      	mov	r7, r1
 80036f6:	e7a6      	b.n	8003646 <_svfiprintf_r+0xc6>
 80036f8:	2300      	movs	r3, #0
 80036fa:	250a      	movs	r5, #10
 80036fc:	4619      	mov	r1, r3
 80036fe:	3701      	adds	r7, #1
 8003700:	9305      	str	r3, [sp, #20]
 8003702:	4638      	mov	r0, r7
 8003704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003708:	3a30      	subs	r2, #48	; 0x30
 800370a:	2a09      	cmp	r2, #9
 800370c:	d903      	bls.n	8003716 <_svfiprintf_r+0x196>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0c8      	beq.n	80036a4 <_svfiprintf_r+0x124>
 8003712:	9105      	str	r1, [sp, #20]
 8003714:	e7c6      	b.n	80036a4 <_svfiprintf_r+0x124>
 8003716:	fb05 2101 	mla	r1, r5, r1, r2
 800371a:	2301      	movs	r3, #1
 800371c:	4607      	mov	r7, r0
 800371e:	e7f0      	b.n	8003702 <_svfiprintf_r+0x182>
 8003720:	ab03      	add	r3, sp, #12
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	4622      	mov	r2, r4
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <_svfiprintf_r+0x1ec>)
 8003728:	a904      	add	r1, sp, #16
 800372a:	4640      	mov	r0, r8
 800372c:	f3af 8000 	nop.w
 8003730:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003734:	4681      	mov	r9, r0
 8003736:	d1d6      	bne.n	80036e6 <_svfiprintf_r+0x166>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	065b      	lsls	r3, r3, #25
 800373c:	f53f af35 	bmi.w	80035aa <_svfiprintf_r+0x2a>
 8003740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003742:	b01d      	add	sp, #116	; 0x74
 8003744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003748:	ab03      	add	r3, sp, #12
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4622      	mov	r2, r4
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <_svfiprintf_r+0x1ec>)
 8003750:	a904      	add	r1, sp, #16
 8003752:	4640      	mov	r0, r8
 8003754:	f7ff f9e2 	bl	8002b1c <_printf_i>
 8003758:	e7ea      	b.n	8003730 <_svfiprintf_r+0x1b0>
 800375a:	bf00      	nop
 800375c:	08003a10 	.word	0x08003a10
 8003760:	08003a16 	.word	0x08003a16
 8003764:	08003a1a 	.word	0x08003a1a
 8003768:	00000000 	.word	0x00000000
 800376c:	080034cd 	.word	0x080034cd

08003770 <__sread>:
 8003770:	b510      	push	{r4, lr}
 8003772:	460c      	mov	r4, r1
 8003774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003778:	f000 f89c 	bl	80038b4 <_read_r>
 800377c:	2800      	cmp	r0, #0
 800377e:	bfab      	itete	ge
 8003780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003782:	89a3      	ldrhlt	r3, [r4, #12]
 8003784:	181b      	addge	r3, r3, r0
 8003786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800378a:	bfac      	ite	ge
 800378c:	6563      	strge	r3, [r4, #84]	; 0x54
 800378e:	81a3      	strhlt	r3, [r4, #12]
 8003790:	bd10      	pop	{r4, pc}

08003792 <__swrite>:
 8003792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003796:	461f      	mov	r7, r3
 8003798:	898b      	ldrh	r3, [r1, #12]
 800379a:	4605      	mov	r5, r0
 800379c:	05db      	lsls	r3, r3, #23
 800379e:	460c      	mov	r4, r1
 80037a0:	4616      	mov	r6, r2
 80037a2:	d505      	bpl.n	80037b0 <__swrite+0x1e>
 80037a4:	2302      	movs	r3, #2
 80037a6:	2200      	movs	r2, #0
 80037a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ac:	f000 f868 	bl	8003880 <_lseek_r>
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	4632      	mov	r2, r6
 80037b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037be:	463b      	mov	r3, r7
 80037c0:	4628      	mov	r0, r5
 80037c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037c6:	f000 b817 	b.w	80037f8 <_write_r>

080037ca <__sseek>:
 80037ca:	b510      	push	{r4, lr}
 80037cc:	460c      	mov	r4, r1
 80037ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d2:	f000 f855 	bl	8003880 <_lseek_r>
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	bf15      	itete	ne
 80037dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80037de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037e6:	81a3      	strheq	r3, [r4, #12]
 80037e8:	bf18      	it	ne
 80037ea:	81a3      	strhne	r3, [r4, #12]
 80037ec:	bd10      	pop	{r4, pc}

080037ee <__sclose>:
 80037ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f2:	f000 b813 	b.w	800381c <_close_r>
	...

080037f8 <_write_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4605      	mov	r5, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	2200      	movs	r2, #0
 8003802:	4c05      	ldr	r4, [pc, #20]	; (8003818 <_write_r+0x20>)
 8003804:	6022      	str	r2, [r4, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	f7fd f8d7 	bl	80009ba <_write>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d102      	bne.n	8003816 <_write_r+0x1e>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	b103      	cbz	r3, 8003816 <_write_r+0x1e>
 8003814:	602b      	str	r3, [r5, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	20000924 	.word	0x20000924

0800381c <_close_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	2300      	movs	r3, #0
 8003820:	4c05      	ldr	r4, [pc, #20]	; (8003838 <_close_r+0x1c>)
 8003822:	4605      	mov	r5, r0
 8003824:	4608      	mov	r0, r1
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	f7fd f8e3 	bl	80009f2 <_close>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d102      	bne.n	8003836 <_close_r+0x1a>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	b103      	cbz	r3, 8003836 <_close_r+0x1a>
 8003834:	602b      	str	r3, [r5, #0]
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	20000924 	.word	0x20000924

0800383c <_fstat_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	2300      	movs	r3, #0
 8003840:	4c06      	ldr	r4, [pc, #24]	; (800385c <_fstat_r+0x20>)
 8003842:	4605      	mov	r5, r0
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	f7fd f8dd 	bl	8000a08 <_fstat>
 800384e:	1c43      	adds	r3, r0, #1
 8003850:	d102      	bne.n	8003858 <_fstat_r+0x1c>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	b103      	cbz	r3, 8003858 <_fstat_r+0x1c>
 8003856:	602b      	str	r3, [r5, #0]
 8003858:	bd38      	pop	{r3, r4, r5, pc}
 800385a:	bf00      	nop
 800385c:	20000924 	.word	0x20000924

08003860 <_isatty_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	2300      	movs	r3, #0
 8003864:	4c05      	ldr	r4, [pc, #20]	; (800387c <_isatty_r+0x1c>)
 8003866:	4605      	mov	r5, r0
 8003868:	4608      	mov	r0, r1
 800386a:	6023      	str	r3, [r4, #0]
 800386c:	f7fd f8db 	bl	8000a26 <_isatty>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_isatty_r+0x1a>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	b103      	cbz	r3, 800387a <_isatty_r+0x1a>
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	20000924 	.word	0x20000924

08003880 <_lseek_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4605      	mov	r5, r0
 8003884:	4608      	mov	r0, r1
 8003886:	4611      	mov	r1, r2
 8003888:	2200      	movs	r2, #0
 800388a:	4c05      	ldr	r4, [pc, #20]	; (80038a0 <_lseek_r+0x20>)
 800388c:	6022      	str	r2, [r4, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f7fd f8d3 	bl	8000a3a <_lseek>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_lseek_r+0x1e>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	b103      	cbz	r3, 800389e <_lseek_r+0x1e>
 800389c:	602b      	str	r3, [r5, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	20000924 	.word	0x20000924

080038a4 <_malloc_usable_size_r>:
 80038a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a8:	1f18      	subs	r0, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bfbc      	itt	lt
 80038ae:	580b      	ldrlt	r3, [r1, r0]
 80038b0:	18c0      	addlt	r0, r0, r3
 80038b2:	4770      	bx	lr

080038b4 <_read_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4605      	mov	r5, r0
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	2200      	movs	r2, #0
 80038be:	4c05      	ldr	r4, [pc, #20]	; (80038d4 <_read_r+0x20>)
 80038c0:	6022      	str	r2, [r4, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	f7fd f85c 	bl	8000980 <_read>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d102      	bne.n	80038d2 <_read_r+0x1e>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	b103      	cbz	r3, 80038d2 <_read_r+0x1e>
 80038d0:	602b      	str	r3, [r5, #0]
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	20000924 	.word	0x20000924

080038d8 <_init>:
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038da:	bf00      	nop
 80038dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038de:	bc08      	pop	{r3}
 80038e0:	469e      	mov	lr, r3
 80038e2:	4770      	bx	lr

080038e4 <_fini>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	bf00      	nop
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr
